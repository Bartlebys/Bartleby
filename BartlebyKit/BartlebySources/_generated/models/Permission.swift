//
//  Permission.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for benoit@pereira-da-silva.com
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
// WE TRY TO GENERATE ANY REPETITIVE CODE AND TO IMPROVE THE QUALITY ITERATIVELY
//
// Copyright (c) 2015  Chaosmos | https://chaosmos.fr  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
#endif

// MARK: Model Permission
@objc(Permission) public class Permission : BaseObject{


	//The call string e.g : DeleteOperation->call
	public var callString:String?
	//The level of the permission (check Bartleby's doc)
	public var level:Int?
	public var rule:[String]?


    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
        mapping(map)
    }

    override public func mapping(map: Map) {
        super.mapping(map)
		callString <- map["callString"]
		level <- map["level"]
		rule <- map["rule"]
    }


    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
		callString=String(decoder.decodeObjectOfClass(NSString.self, forKey:"callString") as NSString?)
		level=decoder.decodeIntegerForKey("level") 
		rule=decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),NSString.self]), forKey: "rule") as? [String]

    }

    override public func encodeWithCoder(coder: NSCoder) {
        super.encodeWithCoder(coder)
		if let callString = self.callString {
			coder.encodeObject(callString,forKey:"callString")
		}
		if let level = self.level {
			coder.encodeInteger(level,forKey:"level")
		}
		if let rule = self.rule {
			coder.encodeObject(rule,forKey:"rule")
		}
    }


    override public class func supportsSecureCoding() -> Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return "permissions"
    }

    override public var d_collectionName:String{
        return Permission.collectionName
    }


    // MARK: Persistent

    override public func toPersistentRepresentation()->(UID:String,collectionName:String,serializedUTF8String:String,A:Double,B:Double,C:Double,D:Double,E:Double,S:String){
        var r=super.toPersistentRepresentation()
        r.A=NSDate().timeIntervalSince1970
        return r
    }

}

