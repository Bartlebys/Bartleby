//
//  SerializableInvocationSample.swift
//  Bartleby
//
//  Created by Benoit Pereira da Silva on 08/10/2015.
//  Copyright Â© 2015 https://pereira-da-silva.com for Chaosmos SAS
//  All rights reserved you can ask for a license.

import Foundation
import ObjectMapper
import BartlebyKit

// THIS SAMPLE FILE IS A TEMPLATE


@objc(PrintMessageSampleArguments) class PrintMessageSampleArguments : BaseObject {
    
    //
    var message:String=""
    
    required init(){
        super.init()
    }
    // MARK: Mappable
    
    required init?(_ map: Map) {
        super.init(map)
        mapping(map)
    }

    required init?(coder decoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func mapping(map: Map) {
        super.mapping(map)
        message <- map["message"]
    }
    
}
 

// Dont forget to set @objc(ClassName) before your class for invocations
@objc(PrintMessageSample) class PrintMessageSample: BaseObject,SerializableInvocation{
    
    // MARK:- SerializableInvocation
    
    // *****************************
    // ** Implementation template **
    // *****************************
    
    // Dont forget to set @objc(ClassName) before your class
    
    // 1# Define the argument type 
    
    typealias ArgumentType=PrintMessageSampleArguments
    
    // 2# Implement the invocation logic invoke()
    
    func invoke(){
        Bartleby.bprint("PRINT \(_serializableArguments.message)",file:#file,function:#function,line: #line)
    }
    

    // Most of the time this code is generated by Bartleby
    // (!) CODE TO COPY 
    
    
    internal var _serializableArguments:ArgumentType=ArgumentType()
    
    var argumentClassName:String! {
        get{
            return NSStringFromClass(ArgumentType.self)
        }
    }
    
    required init(arguments:Collectible) throws {
        super.init()
        guard let args = arguments as? ArgumentType 
            else{
                throw SerializableInvocationError.ArgumentsTypeMisMatch
        }
        _serializableArguments = args
    }
    
    
    // MARK: Mappable
    
    required init?(_ map: Map) {
        super.init(map)
        mapping(map)
    }
    
    
    required init(){
        super.init()
    }

    required init?(coder decoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func mapping(map: Map) {
        super.mapping(map)
        _serializableArguments <- map["_serializableArguments"]
    }
    
    // (!) END OF CODE TO COPY 

}