//
//  User.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for benoit@pereira-da-silva.com
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
// WE TRY TO GENERATE ANY REPETITIVE CODE AND TO IMPROVE THE QUALITY ITERATIVELY
//
// Copyright (c) 2015  Chaosmos | https://chaosmos.fr  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
#endif

// MARK: Model User
@objc(User) public class User : JObject{


	//The spaceUID. A user with the same credentials can exists within multiple Data space.
	public var spaceUID:String = "\(Bartleby.createUID())"
	//the verification method
	public enum VerificationMethod:String{
		case None = "None"
		case ByPhoneNumber = "ByPhoneNumber"
		case ByEmail = "ByEmail"
	}
	public var verificationMethod:VerificationMethod = .ByPhoneNumber
	public var firstname:String = "\(Bartleby.randomStringWithLength(5))"
	public var lastname:String = "\(Bartleby.randomStringWithLength(5))"
	//The user's email. Can be the secondary Identification source 
	public var email:String?
	//The user's phone number. Can be the secondary Identification source 
	public var phoneNumber:String?
	//The hashed version of the user password
	public var password:String = "\(Bartleby.randomStringWithLength(8,signs:Bartleby.configuration.PASSWORD_CHAR_CART))"
	//An activation code
	public var activationCode:String = "\(Bartleby.randomStringWithLength(8,signs:Bartleby.configuration.PASSWORD_CHAR_CART))"
	//User Status
	public enum Status:String{
		case New = "new"
		case Actived = "actived"
		case Suspended = "suspended"
	}
	public var status:Status = .New
	//The tags of the user
	public var tags:[Alias<Tag>] = [Alias<Tag>]()
	//The groups of the user
	public var groups:[Alias<Group>] = [Alias<Group>]()
	//Notes
	public var notes:String?


    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
        mapping(map)
    }

    override public func mapping(map: Map) {
        super.mapping(map)
		self.spaceUID <- map["spaceUID"]
		self.verificationMethod <- map["verificationMethod"]
		self.firstname <- map["firstname"]
		self.lastname <- map["lastname"]
		self.email <- map["email"]
		self.phoneNumber <- map["phoneNumber"]
		self.password <- map["password"]
		self.activationCode <- map["activationCode"]
		self.status <- map["status"]
		self.tags <- map["tags"]
		self.groups <- map["groups"]
		self.notes <- map["notes"]
    }


    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
		self.spaceUID=String(decoder.decodeObjectOfClass(NSString.self, forKey: "spaceUID")! as NSString)
		self.verificationMethod=User.VerificationMethod(rawValue:String(decoder.decodeObjectOfClass(NSString.self, forKey: "verificationMethod")! as NSString))! 
		self.firstname=String(decoder.decodeObjectOfClass(NSString.self, forKey: "firstname")! as NSString)
		self.lastname=String(decoder.decodeObjectOfClass(NSString.self, forKey: "lastname")! as NSString)
		self.email=String(decoder.decodeObjectOfClass(NSString.self, forKey:"email") as NSString?)
		self.phoneNumber=String(decoder.decodeObjectOfClass(NSString.self, forKey:"phoneNumber") as NSString?)
		self.password=String(decoder.decodeObjectOfClass(NSString.self, forKey: "password")! as NSString)
		self.activationCode=String(decoder.decodeObjectOfClass(NSString.self, forKey: "activationCode")! as NSString)
		self.status=User.Status(rawValue:String(decoder.decodeObjectOfClass(NSString.self, forKey: "status")! as NSString))! 
		self.tags=decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),Alias<Tag>.classForCoder()]), forKey: "tags")! as! [Alias<Tag>]
		self.groups=decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),Alias<Group>.classForCoder()]), forKey: "groups")! as! [Alias<Group>]
		self.notes=String(decoder.decodeObjectOfClass(NSString.self, forKey:"notes") as NSString?)

    }

    override public func encodeWithCoder(coder: NSCoder) {
        super.encodeWithCoder(coder)
		coder.encodeObject(self.spaceUID,forKey:"spaceUID")
		coder.encodeObject(self.verificationMethod.rawValue ,forKey:"verificationMethod")
		coder.encodeObject(self.firstname,forKey:"firstname")
		coder.encodeObject(self.lastname,forKey:"lastname")
		if let email = self.email {
			coder.encodeObject(email,forKey:"email")
		}
		if let phoneNumber = self.phoneNumber {
			coder.encodeObject(phoneNumber,forKey:"phoneNumber")
		}
		coder.encodeObject(self.password,forKey:"password")
		coder.encodeObject(self.activationCode,forKey:"activationCode")
		coder.encodeObject(self.status.rawValue ,forKey:"status")
		coder.encodeObject(self.tags,forKey:"tags")
		coder.encodeObject(self.groups,forKey:"groups")
		if let notes = self.notes {
			coder.encodeObject(notes,forKey:"notes")
		}
    }


    override public class func supportsSecureCoding() -> Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return "users"
    }

    override public var d_collectionName:String{
        return User.collectionName
    }


    // MARK: Persistent

    override public func toPersistentRepresentation()->(UID:String,collectionName:String,serializedUTF8String:String,A:Double,B:Double,C:Double,D:Double,E:Double,S:String){
        var r=super.toPersistentRepresentation()
        r.A=NSDate().timeIntervalSince1970
        return r
    }

}

