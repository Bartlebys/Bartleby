//
//  Trigger.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for benoit@pereira-da-silva.com
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  Chaosmos | https://chaosmos.fr  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
#endif

// MARK: Bartleby's Core: a Trigger encapsulates a bunch of ExternalReferencees that's modelizes a state transformation
@objc(Trigger) public class Trigger : JObject{

    // Universal type support
    override public class func typeName() -> String {
        return "Trigger"
    }

	//The index is injected server side (each dataspace-registry) has it own counter)
	public var index:Int = -1
	//The user.UID of the sender
	public var senderUID:String?
	//The dataSpace UID
	public var spaceUID:String?
	//The action name
	public var action:String = ""
	//A coma separated UIDS list
	public var UIDS:String = ""


    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
    }

    override public func mapping(map: Map) {
        super.mapping(map)
        self.lockAutoCommitObserver()
		self.index <- ( map["index"] )
		self.senderUID <- ( map["senderUID"] )
		self.spaceUID <- ( map["spaceUID"] )
		self.action <- ( map["action"] )
		self.UIDS <- ( map["UIDS"] )
        self.unlockAutoCommitObserver()
    }


    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.lockAutoCommitObserver()
		self.index=decoder.decodeIntegerForKey("index") 
		self.senderUID=String(decoder.decodeObjectOfClass(NSString.self, forKey:"senderUID") as NSString?)
		self.spaceUID=String(decoder.decodeObjectOfClass(NSString.self, forKey:"spaceUID") as NSString?)
		self.action=String(decoder.decodeObjectOfClass(NSString.self, forKey: "action")! as NSString)
		self.UIDS=String(decoder.decodeObjectOfClass(NSString.self, forKey: "UIDS")! as NSString)
        self.unlockAutoCommitObserver()
    }

    override public func encodeWithCoder(coder: NSCoder) {
        super.encodeWithCoder(coder)
		coder.encodeInteger(self.index,forKey:"index")
		if let senderUID = self.senderUID {
			coder.encodeObject(senderUID,forKey:"senderUID")
		}
		if let spaceUID = self.spaceUID {
			coder.encodeObject(spaceUID,forKey:"spaceUID")
		}
		coder.encodeObject(self.action,forKey:"action")
		coder.encodeObject(self.UIDS,forKey:"UIDS")
    }


    override public class func supportsSecureCoding() -> Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return "triggers"
    }

    override public var d_collectionName:String{
        return Trigger.collectionName
    }


}

