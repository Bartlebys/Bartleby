//
//  Trigger.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for benoit@pereira-da-silva.com
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  Chaosmos | https://chaosmos.fr  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
#endif

// MARK: Bartleby's Core: a Trigger encapsulates a bunch of ExternalReferencees that's modelizes a state transformation
@objc(Trigger) public class Trigger : JObject{

    // Universal type support
    override public class func typeName() -> String {
        return "Trigger"
    }

	//A message that can be injected for monitoring or external observation
	public var associatedMessage:String?
	//The index is injected server side.
	public var index:Int?
	//The user.UID of the sender
	public var senderUID:String?
	//An array of String encoding [spaceUID,collectionName,UID1, UID2,...]
	public var upserted:[String] = [String]()
	//An array of String encoding [spaceUID,collectionName, UID1, UID2,...]
	public var deleted:[String] = [String]()


    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
    }

    override public func mapping(map: Map) {
        super.mapping(map)
        self.lockAutoCommitObserver()
		self.associatedMessage <- ( map["associatedMessage"] )
		self.index <- ( map["index"] )
		self.senderUID <- ( map["senderUID"] )
		self.upserted <- ( map["upserted"] )
		self.deleted <- ( map["deleted"] )
        self.unlockAutoCommitObserver()
    }


    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.lockAutoCommitObserver()
		self.associatedMessage=String(decoder.decodeObjectOfClass(NSString.self, forKey:"associatedMessage") as NSString?)
		self.index=decoder.decodeIntegerForKey("index") 
		self.senderUID=String(decoder.decodeObjectOfClass(NSString.self, forKey:"senderUID") as NSString?)
		self.upserted=decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),NSString.self]), forKey: "upserted")! as! [String]
		self.deleted=decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),NSString.self]), forKey: "deleted")! as! [String]
        self.unlockAutoCommitObserver()
    }

    override public func encodeWithCoder(coder: NSCoder) {
        super.encodeWithCoder(coder)
		if let associatedMessage = self.associatedMessage {
			coder.encodeObject(associatedMessage,forKey:"associatedMessage")
		}
		if let index = self.index {
			coder.encodeInteger(index,forKey:"index")
		}
		if let senderUID = self.senderUID {
			coder.encodeObject(senderUID,forKey:"senderUID")
		}
		coder.encodeObject(self.upserted,forKey:"upserted")
		coder.encodeObject(self.deleted,forKey:"deleted")
    }


    override public class func supportsSecureCoding() -> Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return "triggers"
    }

    override public var d_collectionName:String{
        return Trigger.collectionName
    }


}

