//
//  TasksGroup.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for benoit@pereira-da-silva.com
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
// WE TRY TO GENERATE ANY REPETITIVE CODE AND TO IMPROVE THE QUALITY ITERATIVELY
//
// Copyright (c) 2015  Chaosmos | https://chaosmos.fr  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
#endif

// MARK: Model TasksGroup
@objc(TasksGroup) public class TasksGroup : JObject{

    // Universal type support
    override public class func typeName() -> String {
        return "TasksGroup"
    }

	//TasksGroup Status
	public enum Status:Int{
		case Runnable
		case Paused
	}
	public var status:Status = .Runnable
	//The priority is equal to the parent task.
	public enum Priority:Int{
		case Background
		case Low
		case Default
		case High
	}
	public var priority:Priority = .Default
	//The group dataspace
	public var spaceUID:String = "\(Default.NO_UID)"
	//A collection of Concrete Tasks Aliases
	public var tasks:[Task] = [Task]()
	//The alias of he failure task (can be used to cleanup or notify failure)
	public var onFailure:Alias<Task>?
	//The progression state of the group
	public var progressionState:Progression = Progression()
	//The completion state of the group
	public var completionState:Completion = Completion()
	//The group name
	public var name:String = "\(Default.NO_NAME)"
	//A void handler to allow subscribers to register their own handlers
	public var handlers:Handlers = Handlers.withoutCompletion()


    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
        mapping(map)
    }

    override public func mapping(map: Map) {
        super.mapping(map)
		self.status <- map["status"]
		self.priority <- map["priority"]
		self.spaceUID <- map["spaceUID"]
		self.tasks <- map["tasks"]
		self.onFailure <- map["onFailure"]
		self.progressionState <- map["progressionState"]
		self.completionState <- map["completionState"]
		self.name <- map["name"]
    }


    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
		self.status=TasksGroup.Status(rawValue:decoder.decodeIntegerForKey("status") )! 
		self.priority=TasksGroup.Priority(rawValue:decoder.decodeIntegerForKey("priority") )! 
		self.spaceUID=String(decoder.decodeObjectOfClass(NSString.self, forKey: "spaceUID")! as NSString)
		self.tasks=decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),Task.classForCoder()]), forKey: "tasks")! as! [Task]
		self.onFailure=decoder.decodeObjectOfClass(Alias<Task>.self, forKey: "onFailure") 
		self.progressionState=decoder.decodeObjectOfClass(Progression.self, forKey: "progressionState")! 
		self.completionState=decoder.decodeObjectOfClass(Completion.self, forKey: "completionState")! 
		self.name=String(decoder.decodeObjectOfClass(NSString.self, forKey: "name")! as NSString)

    }

    override public func encodeWithCoder(coder: NSCoder) {
        super.encodeWithCoder(coder)
		coder.encodeInteger(self.status.rawValue ,forKey:"status")
		coder.encodeInteger(self.priority.rawValue ,forKey:"priority")
		coder.encodeObject(self.spaceUID,forKey:"spaceUID")
		coder.encodeObject(self.tasks,forKey:"tasks")
		if let onFailure = self.onFailure {
			coder.encodeObject(onFailure,forKey:"onFailure")
		}
		coder.encodeObject(self.progressionState,forKey:"progressionState")
		coder.encodeObject(self.completionState,forKey:"completionState")
		coder.encodeObject(self.name,forKey:"name")
		coder.encodeObject(self.handlers,forKey:"handlers")
    }


    override public class func supportsSecureCoding() -> Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return "tasksGroups"
    }

    override public var d_collectionName:String{
        return TasksGroup.collectionName
    }


}

