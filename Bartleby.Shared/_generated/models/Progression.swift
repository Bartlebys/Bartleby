//
//  Progression.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for b@bartlebys.org
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  Bartleby's | https://bartlebys.org  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
#endif

// MARK: Bartleby's Commons: A progression state
@objc(Progression) public class Progression : JObject{

    // Universal type support
    override public class func typeName() -> String {
        return "Progression"
    }

	//Index of the task
	public var currentTaskIndex:Int = 0  {	 
	    willSet { 
	       if currentTaskIndex != newValue {
	            self.provisionChanges() 
	       } 
	    }
	}

	//Total number of tasks
	public var totalTaskCount:Int = 0  {	 
	    willSet { 
	       if totalTaskCount != newValue {
	            self.provisionChanges() 
	       } 
	    }
	}

	//0 to 1
	dynamic public var currentTaskProgress:Double = 0  {	 
	    willSet { 
	       if currentTaskProgress != newValue {
	            self.provisionChanges() 
	       } 
	    }
	}

	//The Message
	dynamic public var message:String = ""{	 
	    willSet { 
	       if message != newValue {
	            self.provisionChanges() 
	       } 
	    }
	}

	//The associated data
	public var data:NSData? {	 
	    willSet { 
	       if data != newValue {
	            self.provisionChanges() 
	       } 
	    }
	}



    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
    }

    override public func mapping(map: Map) {
        super.mapping(map)
        self.lockAutoCommitObserver()
		self.currentTaskIndex <- ( map["currentTaskIndex"] )
		self.totalTaskCount <- ( map["totalTaskCount"] )
		self.currentTaskProgress <- ( map["currentTaskProgress"] )
		self.message <- ( map["message"] )
		self.data <- ( map["data"], Base64DataTransform() )
        self.unlockAutoCommitObserver()
    }


    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.lockAutoCommitObserver()
		self.currentTaskIndex=decoder.decodeIntegerForKey("currentTaskIndex") 
		self.totalTaskCount=decoder.decodeIntegerForKey("totalTaskCount") 
		self.currentTaskProgress=decoder.decodeDoubleForKey("currentTaskProgress") 
		self.message=String(decoder.decodeObjectOfClass(NSString.self, forKey: "message")! as NSString)
		self.data=decoder.decodeObjectOfClass(NSData.self, forKey:"data") as NSData?
        self.unlockAutoCommitObserver()
    }

    override public func encodeWithCoder(coder: NSCoder) {
        super.encodeWithCoder(coder)
		coder.encodeInteger(self.currentTaskIndex,forKey:"currentTaskIndex")
		coder.encodeInteger(self.totalTaskCount,forKey:"totalTaskCount")
		coder.encodeDouble(self.currentTaskProgress,forKey:"currentTaskProgress")
		coder.encodeObject(self.message,forKey:"message")
		if let data = self.data {
			coder.encodeObject(data,forKey:"data")
		}
    }


    override public class func supportsSecureCoding() -> Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return "progressions"
    }

    override public var d_collectionName:String{
        return Progression.collectionName
    }


}

