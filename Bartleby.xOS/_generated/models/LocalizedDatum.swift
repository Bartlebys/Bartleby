//
//  LocalizedDatum.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
#endif

// MARK: An entity used to associate localized name and informations

@objc open class LocalizedDatum: ManagedModel {
    // Universal type support
    open override class func typeName() -> String {
        return "LocalizedDatum"
    }

    //the localized key
    @objc open dynamic var key: String = "" {
        didSet {
            if !self.wantsQuietChanges && key != oldValue {
                self.provisionChanges(forKey: "key", oldValue: oldValue, newValue: key)
            }
        }
    }

    // The localized string value
    @objc open dynamic var stringValue: String? {
        didSet {
            if !wantsQuietChanges && stringValue != oldValue {
                provisionChanges(forKey: "stringValue", oldValue: oldValue, newValue: stringValue)
            }
        }
    }

    // The localized data value
    @objc open dynamic var dataValue: Data? {
        didSet {
            if !wantsQuietChanges && dataValue != oldValue {
                provisionChanges(forKey: "dataValue", oldValue: oldValue, newValue: dataValue)
            }
        }
    }

    // MARK: - Codable

    public enum LocalizedDatumCodingKeys: String, CodingKey {
        case key
        case stringValue
        case dataValue
    }

    public required init(from decoder: Decoder) throws {
        try super.init(from: decoder)
        try quietThrowingChanges {
            let values = try decoder.container(keyedBy: LocalizedDatumCodingKeys.self)
            self.key = try values.decode(String.self, forKey: .key)
            self.stringValue = try values.decodeIfPresent(String.self, forKey: .stringValue)
            self.dataValue = try values.decodeIfPresent(Data.self, forKey: .dataValue)
        }
    }

    open override func encode(to encoder: Encoder) throws {
        try super.encode(to: encoder)
        var container = encoder.container(keyedBy: LocalizedDatumCodingKeys.self)
        try container.encode(key, forKey: .key)
        try container.encodeIfPresent(stringValue, forKey: .stringValue)
        try container.encodeIfPresent(dataValue, forKey: .dataValue)
    }

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    open override var exposedKeys: [String] {
        var exposed = super.exposedKeys
        exposed.append(contentsOf: ["key", "stringValue", "dataValue"])
        return exposed
    }

    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    open override func setExposedValue(_ value: Any?, forKey key: String) throws {
        switch key {
        case "key":
            if let casted = value as? String {
                self.key = casted
            }
        case "stringValue":
            if let casted = value as? String {
                stringValue = casted
            }
        case "dataValue":
            if let casted = value as? Data {
                dataValue = casted
            }
        default:
            return try super.setExposedValue(value, forKey: key)
        }
    }

    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    open override func getExposedValueForKey(_ key: String) throws -> Any? {
        switch key {
        case "key":
            return self.key
        case "stringValue":
            return stringValue
        case "dataValue":
            return dataValue
        default:
            return try super.getExposedValueForKey(key)
        }
    }

    // MARK: - Initializable

    public required init() {
        super.init()
    }

    // MARK: - UniversalType

    open override class var collectionName: String {
        return "localizedData"
    }

    open override var d_collectionName: String {
        return LocalizedDatum.collectionName
    }
}
