//
//  Acknowledgment.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
	import ObjectMapper
#endif

// MARK: Bartleby's Core: an object used to Acknowledge a Trigger
@objc(Acknowledgment) open class Acknowledgment : BartlebyObject{

    // Universal type support
    override open class func typeName() -> String {
        return "Acknowledgment"
    }

	//The trigger index
	dynamic open var triggerIndex:Int = -1

	//The subjects UIDS
	dynamic open var uids:[String] = [String]()

	//The subjects versions (used to analyze possible divergences)
	dynamic open var versions:[Int] = [Int]()

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["triggerIndex","uids","versions"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "triggerIndex":
                if let casted=value as? Int{
                    self.triggerIndex=casted
                }
            case "uids":
                if let casted=value as? [String]{
                    self.uids=casted
                }
            case "versions":
                if let casted=value as? [Int]{
                    self.versions=casted
                }
            default:
                throw ObjectExpositionError.UnknownKey(key: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "triggerIndex":
               return self.triggerIndex
            case "uids":
               return self.uids
            case "versions":
               return self.versions
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Mappable

    required public init?(map: Map) {
        super.init(map:map)
    }

    override open func mapping(map: Map) {
        super.mapping(map: map)
        self.silentGroupedChanges {
			self.triggerIndex <- ( map["triggerIndex"] )
			self.uids <- ( map["uids"] )
			self.versions <- ( map["versions"] )
        }
    }


    // MARK: - NSSecureCoding

    required public init?(coder decoder: NSCoder) {super.init(coder: decoder)
        self.silentGroupedChanges {
			self.triggerIndex=decoder.decodeInteger(forKey:"triggerIndex") 
			self.uids=decoder.decodeObject(of: [NSArray.classForCoder(),NSString.self], forKey: "uids")! as! [String]
			self.versions=decoder.decodeObject(of: [NSArray.classForCoder(),NSNumber.self], forKey: "versions")! as! [Int]
        }
    }

    override open func encode(with coder: NSCoder) {super.encode(with:coder)
		coder.encode(self.triggerIndex,forKey:"triggerIndex")
		coder.encode(self.uids,forKey:"uids")
		coder.encode(self.versions,forKey:"versions")
    }

    override open class var supportsSecureCoding:Bool{
        return true
    }

     required public init() {
        super.init()
    }

    // MARK: Identifiable

    override open class var collectionName:String{
        return "acknowledgments"
    }

    override open var d_collectionName:String{
        return Acknowledgment.collectionName
    }
}