//
//  Acknowledgment.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
#endif

// MARK: Bartleby's Core: an object used to Acknowledge a Trigger
@objc open class Acknowledgment : Metrics {

    // DeclaredTypeName support
    override open class func typeName() -> String {
        return "Acknowledgment"
    }


	//The trigger index
	@objc dynamic open var triggerIndex:Int = -1

	//The subjects UIDS
	@objc dynamic open var uids:[String] = [String]()

	//The triggerRelayDuration is computed server side it integrates the semaphore impact. (it can be used for QOS computation)
	@objc dynamic open var triggerRelayDuration:Double = 0


    // MARK: - Codable


    enum AcknowledgmentCodingKeys: String,CodingKey{
		case triggerIndex
		case uids
		case triggerRelayDuration
    }

    required public init(from decoder: Decoder) throws{
		try super.init(from: decoder)
        try self.quietThrowingChanges {
			let values = try decoder.container(keyedBy: AcknowledgmentCodingKeys.self)
			self.triggerIndex = try values.decode(Int.self,forKey:.triggerIndex)
			self.uids = try values.decode([String].self,forKey:.uids)
			self.triggerRelayDuration = try values.decode(Double.self,forKey:.triggerRelayDuration)
        }
    }

    override open func encode(to encoder: Encoder) throws {
		try super.encode(to:encoder)
		var container = encoder.container(keyedBy: AcknowledgmentCodingKeys.self)
		try container.encode(self.triggerIndex,forKey:.triggerIndex)
		try container.encode(self.uids,forKey:.uids)
		try container.encode(self.triggerRelayDuration,forKey:.triggerRelayDuration)
    }


    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override  open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["triggerIndex","uids","triggerRelayDuration"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override  open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "triggerIndex":
                if let casted=value as? Int{
                    self.triggerIndex=casted
                }
            case "uids":
                if let casted=value as? [String]{
                    self.uids=casted
                }
            case "triggerRelayDuration":
                if let casted=value as? Double{
                    self.triggerRelayDuration=casted
                }
            default:
                return try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override  open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "triggerIndex":
               return self.triggerIndex
            case "uids":
               return self.uids
            case "triggerRelayDuration":
               return self.triggerRelayDuration
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Initializable
     required public init() {
        super.init()
    }
}