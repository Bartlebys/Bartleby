//
//  Trigger.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
#endif

// MARK: Bartleby's Core: a Trigger encapsulates a bunch of that's modelizes a state transformation

@objc open class Trigger: UnManagedModel {
    // DeclaredTypeName support
    open override class func typeName() -> String {
        return "Trigger"
    }

    // The index is injected server side (each observationUID) has it own counter)
    @objc open dynamic var index: Int = -1

    // The dataSpace UID
    @objc open dynamic var spaceUID: String?

    // The observation UID
    @objc open dynamic var observationUID: String?

    // The user.UID of the sender
    @objc open dynamic var senderUID: String?

    // The UID of the instance of Bartleby client that has created the trigger.
    @objc open dynamic var runUID: String?

    // The action that has initiated the trigger
    @objc open dynamic var origin: String?

    // The targetted collection name
    @objc open dynamic var targetCollectionName: String = ""

    // The server side creation date ( informative, use index for ranking)
    @objc open dynamic var creationDate: Date?

    // The action name
    @objc open dynamic var action: String = ""

    // A coma separated UIDS list
    @objc open dynamic var UIDS: String = ""

    // The sseDbProcessingDuration is computed server side in SSE context only not when calling Triggers endpoints (it can be used for QOS computation)
    @objc open dynamic var sseDbProcessingDuration: Double = -1

    // A collection of JSON payload
    @objc open dynamic var payloads: [Data]?

    // MARK: - Codable

    public enum TriggerCodingKeys: String, CodingKey {
        case index
        case spaceUID
        case observationUID
        case senderUID
        case runUID
        case origin
        case targetCollectionName
        case creationDate
        case action
        case UIDS
        case sseDbProcessingDuration
        case payloads
    }

    public required init(from decoder: Decoder) throws {
        try super.init(from: decoder)
        try quietThrowingChanges {
            let values = try decoder.container(keyedBy: TriggerCodingKeys.self)
            self.index = try values.decode(Int.self, forKey: .index)
            self.spaceUID = try values.decodeIfPresent(String.self, forKey: .spaceUID)
            self.observationUID = try values.decodeIfPresent(String.self, forKey: .observationUID)
            self.senderUID = try values.decodeIfPresent(String.self, forKey: .senderUID)
            self.runUID = try values.decodeIfPresent(String.self, forKey: .runUID)
            self.origin = try values.decodeIfPresent(String.self, forKey: .origin)
            self.targetCollectionName = try values.decode(String.self, forKey: .targetCollectionName)
            self.creationDate = try values.decodeIfPresent(Date.self, forKey: .creationDate)
            self.action = try values.decode(String.self, forKey: .action)
            self.UIDS = try values.decode(String.self, forKey: .UIDS)
            self.sseDbProcessingDuration = try values.decode(Double.self, forKey: .sseDbProcessingDuration)
            self.payloads = try values.decodeIfPresent([Data].self, forKey: .payloads)
        }
    }

    open override func encode(to encoder: Encoder) throws {
        try super.encode(to: encoder)
        var container = encoder.container(keyedBy: TriggerCodingKeys.self)
        try container.encode(index, forKey: .index)
        try container.encodeIfPresent(spaceUID, forKey: .spaceUID)
        try container.encodeIfPresent(observationUID, forKey: .observationUID)
        try container.encodeIfPresent(senderUID, forKey: .senderUID)
        try container.encodeIfPresent(runUID, forKey: .runUID)
        try container.encodeIfPresent(origin, forKey: .origin)
        try container.encode(targetCollectionName, forKey: .targetCollectionName)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encode(action, forKey: .action)
        try container.encode(UIDS, forKey: .UIDS)
        try container.encode(sseDbProcessingDuration, forKey: .sseDbProcessingDuration)
        try container.encodeIfPresent(payloads, forKey: .payloads)
    }

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    open override var exposedKeys: [String] {
        var exposed = super.exposedKeys
        exposed.append(contentsOf: ["index", "spaceUID", "observationUID", "senderUID", "runUID", "origin", "targetCollectionName", "creationDate", "action", "UIDS", "sseDbProcessingDuration", "payloads"])
        return exposed
    }

    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    open override func setExposedValue(_ value: Any?, forKey key: String) throws {
        switch key {
        case "index":
            if let casted = value as? Int {
                index = casted
            }
        case "spaceUID":
            if let casted = value as? String {
                spaceUID = casted
            }
        case "observationUID":
            if let casted = value as? String {
                observationUID = casted
            }
        case "senderUID":
            if let casted = value as? String {
                senderUID = casted
            }
        case "runUID":
            if let casted = value as? String {
                runUID = casted
            }
        case "origin":
            if let casted = value as? String {
                origin = casted
            }
        case "targetCollectionName":
            if let casted = value as? String {
                targetCollectionName = casted
            }
        case "creationDate":
            if let casted = value as? Date {
                creationDate = casted
            }
        case "action":
            if let casted = value as? String {
                action = casted
            }
        case "UIDS":
            if let casted = value as? String {
                UIDS = casted
            }
        case "sseDbProcessingDuration":
            if let casted = value as? Double {
                sseDbProcessingDuration = casted
            }
        case "payloads":
            if let casted = value as? [Data] {
                payloads = casted
            }
        default:
            return try super.setExposedValue(value, forKey: key)
        }
    }

    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    open override func getExposedValueForKey(_ key: String) throws -> Any? {
        switch key {
        case "index":
            return index
        case "spaceUID":
            return spaceUID
        case "observationUID":
            return observationUID
        case "senderUID":
            return senderUID
        case "runUID":
            return runUID
        case "origin":
            return origin
        case "targetCollectionName":
            return targetCollectionName
        case "creationDate":
            return creationDate
        case "action":
            return action
        case "UIDS":
            return UIDS
        case "sseDbProcessingDuration":
            return sseDbProcessingDuration
        case "payloads":
            return payloads
        default:
            return try super.getExposedValueForKey(key)
        }
    }

    // MARK: - Initializable

    public required init() {
        super.init()
    }
}
