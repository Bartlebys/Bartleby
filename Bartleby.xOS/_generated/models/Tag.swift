//
//  Tag.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
		import Alamofire
#endif

// MARK: Bartleby's Core: a tag can be used to classify instances (The tag are set using relationships)
@objc(Tag) open class Tag : ManagedModel{

    // Universal type support
    override open class func typeName() -> String {
        return "Tag"
    }

	@objc dynamic open var creationDate:Date? {
	    didSet { 
	       if !self.wantsQuietChanges && creationDate != oldValue {
	            self.provisionChanges(forKey: "creationDate",oldValue: oldValue,newValue: creationDate) 
	       } 
	    }
	}

	@objc dynamic open var color:String? {
	    didSet { 
	       if !self.wantsQuietChanges && color != oldValue {
	            self.provisionChanges(forKey: "color",oldValue: oldValue,newValue: color) 
	       } 
	    }
	}

	@objc dynamic open var icon:String? {
	    didSet { 
	       if !self.wantsQuietChanges && icon != oldValue {
	            self.provisionChanges(forKey: "icon",oldValue: oldValue,newValue: icon) 
	       } 
	    }
	}


    // MARK: - Codable


    enum TagCodingKeys: String,CodingKey{
		case creationDate
		case color
		case icon
    }

    required public init(from decoder: Decoder) throws{
		try super.init(from: decoder)
        try self.quietThrowingChanges {
			let values = try decoder.container(keyedBy: TagCodingKeys.self)
			self.creationDate = try values.decodeIfPresent(Date.self,forKey:.creationDate)
			self.color = try values.decodeIfPresent(String.self,forKey:.color)
			self.icon = try values.decodeIfPresent(String.self,forKey:.icon)
        }
    }

    override open func encode(to encoder: Encoder) throws {
		try super.encode(to:encoder)
		var container = encoder.container(keyedBy: TagCodingKeys.self)
		try container.encodeIfPresent(self.creationDate,forKey:.creationDate)
		try container.encodeIfPresent(self.color,forKey:.color)
		try container.encodeIfPresent(self.icon,forKey:.icon)
    }


    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override  open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["creationDate","color","icon"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override  open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "creationDate":
                if let casted=value as? Date{
                    self.creationDate=casted
                }
            case "color":
                if let casted=value as? String{
                    self.color=casted
                }
            case "icon":
                if let casted=value as? String{
                    self.icon=casted
                }
            default:
                return try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override  open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "creationDate":
               return self.creationDate
            case "color":
               return self.color
            case "icon":
               return self.icon
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Initializable
    required public init() {
        super.init()
    }

    // MARK: - UniversalType
    override  open class var collectionName:String{
        return "tags"
    }

    override  open var d_collectionName:String{
        return Tag.collectionName
    }
}