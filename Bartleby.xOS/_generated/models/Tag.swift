//
//  Tag.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for b@bartlebys.org
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  Bartleby's | https://bartlebys.org  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
#endif

// MARK: Bartleby's Core: a tag can be used to classify instances.
@objc(Tag) open class Tag : JObject{

    // Universal type support
    override open class func typeName() -> String {
        return "Tag"
    }

	dynamic open var creationDate:String? {	 
	    didSet { 
	       if creationDate != oldValue {
	            self.provisionChanges(forKey: "creationDate",oldValue: oldValue,newValue: creationDate) 
	       } 
	    }
	}

	dynamic open var color:String? {	 
	    didSet { 
	       if color != oldValue {
	            self.provisionChanges(forKey: "color",oldValue: oldValue,newValue: color) 
	       } 
	    }
	}

	dynamic open var icon:String? {	 
	    didSet { 
	       if icon != oldValue {
	            self.provisionChanges(forKey: "icon",oldValue: oldValue,newValue: icon) 
	       } 
	    }
	}



    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
    }

    override open func mapping(_ map: Map) {
        super.mapping(map)
        self.disableSupervisionAndCommit()
		self.creationDate <- ( map["creationDate"] )
		self.color <- ( map["color"] )
		self.icon <- ( map["icon"] )
        self.enableSuperVisionAndCommit()
    }


    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.disableSupervisionAndCommit()
		self.creationDate=String(describing: decoder.decodeObject(of: NSString.self, forKey:"creationDate") as NSString?)
		self.color=String(describing: decoder.decodeObject(of: NSString.self, forKey:"color") as NSString?)
		self.icon=String(describing: decoder.decodeObject(of: NSString.self, forKey:"icon") as NSString?)
        self.disableSupervisionAndCommit()
    }

    override open func encode(with coder: NSCoder) {
        super.encode(with:coder)
		if let creationDate = self.creationDate {
			coder.encode(creationDate,forKey:"creationDate")
		}
		if let color = self.color {
			coder.encode(color,forKey:"color")
		}
		if let icon = self.icon {
			coder.encode(icon,forKey:"icon")
		}
    }

    override open class var supportsSecureCoding:Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override open class var collectionName:String{
        return "tags"
    }

    override open var d_collectionName:String{
        return Tag.collectionName
    }


}

