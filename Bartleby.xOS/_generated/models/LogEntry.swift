//
//  LogEntry.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
#endif

// MARK: Bartleby's Core: A single print entry
@objc open class LogEntry : UnManagedModel {

    // DeclaredTypeName support
    override open class func typeName() -> String {
        return "LogEntry"
    }


	//The print entry counter
	@objc dynamic open var counter:Int = -1

	//The referent line
	@objc dynamic open var line:Int = -1

	//The elasped duration
	@objc dynamic open var elapsed:Double = -1

	//the message
	@objc dynamic open var message:String = "no message"

	//the file
	@objc dynamic open var file:String = "no file"

	//the function
	@objc dynamic open var function:String = "no function"

	//the category
	@objc dynamic open var category:String = "no category"

	//Is the entry decorative or significant? decoration includes separators, etc...
	@objc dynamic open var decorative:Bool = false

	//Is the entry decorative or significant? decoration includes separators, etc...
	@objc dynamic private var _runUID:String = Bartleby.runUID


    // MARK: - Codable


    enum LogEntryCodingKeys: String,CodingKey{
		case counter
		case line
		case elapsed
		case message
		case file
		case function
		case category
		case decorative
		case _runUID
    }

    required public init(from decoder: Decoder) throws{
		try super.init(from: decoder)
        try self.quietThrowingChanges {
			let values = try decoder.container(keyedBy: LogEntryCodingKeys.self)
			self.counter = try values.decode(Int.self,forKey:.counter)
			self.line = try values.decode(Int.self,forKey:.line)
			self.elapsed = try values.decode(Double.self,forKey:.elapsed)
			self.message = try values.decode(String.self,forKey:.message)
			self.file = try values.decode(String.self,forKey:.file)
			self.function = try values.decode(String.self,forKey:.function)
			self.category = try values.decode(String.self,forKey:.category)
			self.decorative = try values.decode(Bool.self,forKey:.decorative)
			self._runUID = try values.decode(String.self,forKey:._runUID)
        }
    }

    override open func encode(to encoder: Encoder) throws {
		try super.encode(to:encoder)
		var container = encoder.container(keyedBy: LogEntryCodingKeys.self)
		try container.encode(self.counter,forKey:.counter)
		try container.encode(self.line,forKey:.line)
		try container.encode(self.elapsed,forKey:.elapsed)
		try container.encode(self.message,forKey:.message)
		try container.encode(self.file,forKey:.file)
		try container.encode(self.function,forKey:.function)
		try container.encode(self.category,forKey:.category)
		try container.encode(self.decorative,forKey:.decorative)
		try container.encode(self._runUID,forKey:._runUID)
    }


    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override  open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["counter","line","elapsed","message","file","function","category","decorative"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override  open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "counter":
                if let casted=value as? Int{
                    self.counter=casted
                }
            case "line":
                if let casted=value as? Int{
                    self.line=casted
                }
            case "elapsed":
                if let casted=value as? Double{
                    self.elapsed=casted
                }
            case "message":
                if let casted=value as? String{
                    self.message=casted
                }
            case "file":
                if let casted=value as? String{
                    self.file=casted
                }
            case "function":
                if let casted=value as? String{
                    self.function=casted
                }
            case "category":
                if let casted=value as? String{
                    self.category=casted
                }
            case "decorative":
                if let casted=value as? Bool{
                    self.decorative=casted
                }
            default:
                return try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override  open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "counter":
               return self.counter
            case "line":
               return self.line
            case "elapsed":
               return self.elapsed
            case "message":
               return self.message
            case "file":
               return self.file
            case "function":
               return self.function
            case "category":
               return self.category
            case "decorative":
               return self.decorative
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Initializable
     required public init() {
        super.init()
    }
}