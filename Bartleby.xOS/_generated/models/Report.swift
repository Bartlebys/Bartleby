//
//  Report.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
	import ObjectMapper
#endif

// MARK: Bartleby's Core: a Report object that can be used for analytics and support purposes
@objc(Report) open class Report : ValueObject {


	//The document Metadata (contains highly sensitive data)
	dynamic open var metadata:DocumentMetadata?

	//A collection logs
	dynamic open var logs:[LogEntry] = [LogEntry]()

	//A collection metrics
	dynamic open var metrics:[Metrics] = [Metrics]()


    // MARK: - Mappable

    required public init?(map: Map) {
        super.init(map:map)
    }

    override open func mapping(map: Map) {
        super.mapping(map: map)
        self.quietChanges {
			self.metadata <- ( map["metadata"] )
			self.logs <- ( map["logs"] )
			self.metrics <- ( map["metrics"] )
        }
    }


    // MARK: - NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.quietChanges {
			self.metadata=decoder.decodeObject(of:DocumentMetadata.self, forKey: "metadata") 
			self.logs=decoder.decodeObject(of: [NSArray.classForCoder(),LogEntry.classForCoder()], forKey: "logs")! as! [LogEntry]
			self.metrics=decoder.decodeObject(of: [NSArray.classForCoder(),Metrics.classForCoder()], forKey: "metrics")! as! [Metrics]
        }
    }

    override open func encode(with coder: NSCoder) {
        super.encode(with:coder)
		if let metadata = self.metadata {
			coder.encode(metadata,forKey:"metadata")
		}
		coder.encode(self.logs,forKey:"logs")
		coder.encode(self.metrics,forKey:"metrics")
    }

    override open class var supportsSecureCoding:Bool{
        return true
    }

     required public init() {
        super.init()
    }
}