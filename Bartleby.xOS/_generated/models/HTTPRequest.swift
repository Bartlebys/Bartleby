//
//  HTTPRequest.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
	import ObjectMapper
#endif

// MARK: Bartleby's Core: an object that encapsulate the URL Request information
@objc(HTTPRequest) open class HTTPRequest : BartlebyObject{

    // Universal type support
    override open class func typeName() -> String {
        return "HTTPRequest"
    }

	//The url
	dynamic open var url:URL?

	//The HTTP method
	dynamic open var httpMethod:String = "GET"

	//The Headers
	dynamic open var headers:[String:Any]?

	//This data is sent as the message body of the request
	dynamic open var httpBody:Data?

	//The timeout
	dynamic open var timeout:Double = 10

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["url","httpMethod","headers","httpBody","timeout"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "url":
                if let casted=value as? URL{
                    self.url=casted
                }
            case "httpMethod":
                if let casted=value as? String{
                    self.httpMethod=casted
                }
            case "headers":
                if let casted=value as? [String:Any]{
                    self.headers=casted
                }
            case "httpBody":
                if let casted=value as? Data{
                    self.httpBody=casted
                }
            case "timeout":
                if let casted=value as? Double{
                    self.timeout=casted
                }
            default:
                return try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "url":
               return self.url
            case "httpMethod":
               return self.httpMethod
            case "headers":
               return self.headers
            case "httpBody":
               return self.httpBody
            case "timeout":
               return self.timeout
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Mappable

    required public init?(map: Map) {
        super.init(map:map)
    }

    override open func mapping(map: Map) {
        super.mapping(map: map)
        self.quietChanges {
			self.url <- ( map["url"], URLTransform(shouldEncodeURLString:false) )
			self.httpMethod <- ( map["httpMethod"] )
			self.headers <- ( map["headers"] )
			self.httpBody <- ( map["httpBody"], DataTransform() )
			self.timeout <- ( map["timeout"] )
        }
    }


    // MARK: - NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.quietChanges {
			self.url=decoder.decodeObject(of: NSURL.self, forKey:"url") as URL?
			self.httpMethod=String(describing: decoder.decodeObject(of: NSString.self, forKey: "httpMethod")! as NSString)
			self.headers=decoder.decodeObject(of: [NSDictionary.classForCoder(),NSString.classForCoder(),NSNumber.classForCoder(),NSObject.classForCoder(),NSSet.classForCoder()], forKey: "headers")as? [String:Any]
			self.httpBody=decoder.decodeObject(of: NSData.self, forKey:"httpBody") as Data?
			self.timeout=decoder.decodeDouble(forKey:"timeout") 
        }
    }

    override open func encode(with coder: NSCoder) {
        super.encode(with:coder)
		if let url = self.url {
			coder.encode(url,forKey:"url")
		}
		coder.encode(self.httpMethod,forKey:"httpMethod")
		if let headers = self.headers {
			coder.encode(headers,forKey:"headers")
		}
		if let httpBody = self.httpBody {
			coder.encode(httpBody,forKey:"httpBody")
		}
		coder.encode(self.timeout,forKey:"timeout")
    }

    override open class var supportsSecureCoding:Bool{
        return true
    }

     required public init() {
        super.init()
    }

    override open class var collectionName:String{
        return "hTTPRequests"
    }

    override open var d_collectionName:String{
        return HTTPRequest.collectionName
    }
}