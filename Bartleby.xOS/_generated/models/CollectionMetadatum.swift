//
//  CollectionMetadatum.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
#endif

// MARK: Bartleby's Core: Collection Metadatum. Complete implementation in CollectionMetadatum
@objc open class CollectionMetadatum : UnManagedModel {

    // DeclaredTypeName support
    override open class func typeName() -> String {
        return "CollectionMetadatum"
    }


	//the used file storage
	public enum Storage:String{
		case monolithicFileStorage = "monolithicFileStorage"
	}
	open var storage:Storage = .monolithicFileStorage

	//The holding collection name
	@objc dynamic open var collectionName:String = "\(Default.NO_NAME)"

	//The proxy object (not serializable, not supervisable)
	@objc dynamic open var proxy:ManagedModel?

	//Allow distant persistency?
	@objc dynamic open var persistsDistantly:Bool = true

	//In Memory?
	@objc dynamic open var inMemory:Bool = true


    // MARK: - Codable


    enum CollectionMetadatumCodingKeys: String,CodingKey{
		case storage
		case collectionName
		case proxy
		case persistsDistantly
		case inMemory
    }

    required public init(from decoder: Decoder) throws{
		try super.init(from: decoder)
        try self.quietThrowingChanges {
			let values = try decoder.container(keyedBy: CollectionMetadatumCodingKeys.self)
			self.storage = CollectionMetadatum.Storage(rawValue: try values.decode(String.self,forKey:.storage)) ?? .monolithicFileStorage
			self.collectionName = try values.decode(String.self,forKey:.collectionName)
			self.persistsDistantly = try values.decode(Bool.self,forKey:.persistsDistantly)
			self.inMemory = try values.decode(Bool.self,forKey:.inMemory)
        }
    }

    override open func encode(to encoder: Encoder) throws {
		try super.encode(to:encoder)
		var container = encoder.container(keyedBy: CollectionMetadatumCodingKeys.self)
		try container.encode(self.storage.rawValue ,forKey:.storage)
		try container.encode(self.collectionName,forKey:.collectionName)
		try container.encode(self.persistsDistantly,forKey:.persistsDistantly)
		try container.encode(self.inMemory,forKey:.inMemory)
    }


    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override  open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["storage","collectionName","proxy","persistsDistantly","inMemory"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override  open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "storage":
                if let casted=value as? CollectionMetadatum.Storage{
                    self.storage=casted
                }
            case "collectionName":
                if let casted=value as? String{
                    self.collectionName=casted
                }
            case "proxy":
                if let casted=value as? ManagedModel{
                    self.proxy=casted
                }
            case "persistsDistantly":
                if let casted=value as? Bool{
                    self.persistsDistantly=casted
                }
            case "inMemory":
                if let casted=value as? Bool{
                    self.inMemory=casted
                }
            default:
                return try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override  open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "storage":
               return self.storage
            case "collectionName":
               return self.collectionName
            case "proxy":
               return self.proxy
            case "persistsDistantly":
               return self.persistsDistantly
            case "inMemory":
               return self.inMemory
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Initializable
     required public init() {
        super.init()
    }
}