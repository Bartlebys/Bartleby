//
//  Box.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
	import ObjectMapper
#endif

// MARK: Bartleby's Synchronized File System: A box is a logical reference for Nodes and Blocks
@objc(Box) open class Box : BartlebyObject{

    // Universal type support
    override open class func typeName() -> String {
        return "Box"
    }

	//Turned to true when the box is mounted (not serializable, not supervisable)
	dynamic open var isMounted:Bool = false

	//A volatile box is unmounted automatically
	dynamic open var volatile:Bool = true

	//The upload Progression State (not serializable, not supervisable directly by : self.addChangesSuperviser use self.uploadProgression.addChangesSuperviser)
	dynamic open var uploadProgression:Progression = Progression()

	//The Download Progression State (not serializable, not supervisable directly by : self.addChangesSuperviser use self.downloadProgression.addChangesSuperviser)
	dynamic open var downloadProgression:Progression = Progression()

	//The Assembly Progression State (not serializable, not supervisable directly by : self.addChangesSuperviser use self.downloadProgression.addChangesSuperviser)
	dynamic open var assemblyProgression:Progression = Progression()

	//Turned to true if there is an upload in progress (used for progress consolidation optimization)
	dynamic open var uploadInProgress:Bool = false

	//Turned to true if there is an upload in progress (used for progress consolidation optimization)
	dynamic open var downloadInProgress:Bool = false

	//Turned to true if there is an Assembly in progress (used for progress consolidation optimization)
	dynamic open var assemblyInProgress:Bool = false

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["isMounted","volatile","uploadProgression","downloadProgression","assemblyProgression","uploadInProgress","downloadInProgress","assemblyInProgress"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "isMounted":
                if let casted=value as? Bool{
                    self.isMounted=casted
                }
            case "volatile":
                if let casted=value as? Bool{
                    self.volatile=casted
                }
            case "uploadProgression":
                if let casted=value as? Progression{
                    self.uploadProgression=casted
                }
            case "downloadProgression":
                if let casted=value as? Progression{
                    self.downloadProgression=casted
                }
            case "assemblyProgression":
                if let casted=value as? Progression{
                    self.assemblyProgression=casted
                }
            case "uploadInProgress":
                if let casted=value as? Bool{
                    self.uploadInProgress=casted
                }
            case "downloadInProgress":
                if let casted=value as? Bool{
                    self.downloadInProgress=casted
                }
            case "assemblyInProgress":
                if let casted=value as? Bool{
                    self.assemblyInProgress=casted
                }
            default:
                return try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "isMounted":
               return self.isMounted
            case "volatile":
               return self.volatile
            case "uploadProgression":
               return self.uploadProgression
            case "downloadProgression":
               return self.downloadProgression
            case "assemblyProgression":
               return self.assemblyProgression
            case "uploadInProgress":
               return self.uploadInProgress
            case "downloadInProgress":
               return self.downloadInProgress
            case "assemblyInProgress":
               return self.assemblyInProgress
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Mappable

    required public init?(map: Map) {
        super.init(map:map)
    }

    override open func mapping(map: Map) {
        super.mapping(map: map)
        self.silentGroupedChanges {
        }
    }


    // MARK: - NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.silentGroupedChanges {
        }
    }

    override open func encode(with coder: NSCoder) {
        super.encode(with:coder)
    }

    override open class var supportsSecureCoding:Bool{
        return true
    }

     required public init() {
        super.init()
    }

    override open class var collectionName:String{
        return "boxes"
    }

    override open var d_collectionName:String{
        return Box.collectionName
    }
}


// MARK: Shadow

open class BoxShadow :Box,Shadow{

    static func from(_ entity:Box)->BoxShadow{
        let shadow=BoxShadow()
        for k in entity.exposedKeys{
            try? shadow.setExposedValue(entity.getExposedValueForKey(k), forKey: k)
        }
        try? shadow.setShadowUID(UID: entity.UID)
        return shadow
    }

    // MARK: Universal type support

    override open class func typeName() -> String {
        return "BoxShadow"
    }

    // MARK: Collectible

    override open class var collectionName:String{
        return "boxesShadow"
    }

    override open var d_collectionName:String{
        return BoxShadow.collectionName
    }
}