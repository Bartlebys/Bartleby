//
//  Completion.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
	import ObjectMapper
#endif

// MARK: Bartleby's Commons: A completion state
@objc(Completion) open class Completion : UnManagedModel {


	//Success if set to true
	dynamic open var success:Bool = true

	//The status
	dynamic open var statusCode:Int = StatusOfCompletion.undefined.rawValue

	//The Message
	dynamic open var message:String = ""

	//completion data
	dynamic open var data:Data?

	//A category to discriminate bunch of completion states
	dynamic open var category:String = ""

	//An external identifier
	dynamic open var externalIdentifier:String = ""


    // MARK: - Mappable

    required public init?(map: Map) {
        super.init(map:map)
    }

    override open func mapping(map: Map) {
        super.mapping(map: map)
        self.quietChanges {
			self.success <- ( map["success"] )
			self.statusCode <- ( map["statusCode"] )
			self.message <- ( map["message"] )
			self.data <- ( map["data"], DataTransform() )
			self.category <- ( map["category"] )
			self.externalIdentifier <- ( map["externalIdentifier"] )
        }
    }


    // MARK: - NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.quietChanges {
			self.success=decoder.decodeBool(forKey:"success") 
			self.statusCode=decoder.decodeInteger(forKey:"statusCode") 
			self.message=String(describing: decoder.decodeObject(of: NSString.self, forKey: "message")! as NSString)
			self.data=decoder.decodeObject(of: NSData.self, forKey:"data") as Data?
			self.category=String(describing: decoder.decodeObject(of: NSString.self, forKey: "category")! as NSString)
			self.externalIdentifier=String(describing: decoder.decodeObject(of: NSString.self, forKey: "externalIdentifier")! as NSString)
        }
    }

    override open func encode(with coder: NSCoder) {
        super.encode(with:coder)
		coder.encode(self.success,forKey:"success")
		coder.encode(self.statusCode,forKey:"statusCode")
		coder.encode(self.message,forKey:"message")
		if let data = self.data {
			coder.encode(data,forKey:"data")
		}
		coder.encode(self.category,forKey:"category")
		coder.encode(self.externalIdentifier,forKey:"externalIdentifier")
    }

    override open class var supportsSecureCoding:Bool{
        return true
    }

     required public init() {
        super.init()
    }
}