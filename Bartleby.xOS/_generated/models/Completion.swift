//
//  Completion.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
#endif

// MARK: Bartleby's Commons: A completion state
@objc open class Completion : UnManagedModel {

    // DeclaredTypeName support
    override open class func typeName() -> String {
        return "Completion"
    }


	//Success if set to true
	@objc dynamic open var success:Bool = true

	//The status
	@objc dynamic open var statusCode:Int = StatusOfCompletion.undefined.rawValue

	//The Message
	@objc dynamic open var message:String = ""

	//completion data
	@objc dynamic open var data:Data?

	//A category to discriminate bunch of completion states
	@objc dynamic open var category:String = ""

	//An external identifier
	@objc dynamic open var externalIdentifier:String = ""


    // MARK: - Codable


    fileprivate enum CodingKeys: String,CodingKey{
		case success
		case statusCode
		case message
		case data
		case category
		case externalIdentifier
    }

    required public init(from decoder: Decoder) throws{
		try super.init(from: decoder)
        try self.quietThrowingChanges {
			let values = try decoder.container(keyedBy: CodingKeys.self)
			self.success = try values.decode(Bool.self,forKey:.success)
			self.statusCode = try values.decode(Int.self,forKey:.statusCode)
			self.message = try values.decode(String.self,forKey:.message)
			self.data = try values.decodeIfPresent(Data.self,forKey:.data)
			self.category = try values.decode(String.self,forKey:.category)
			self.externalIdentifier = try values.decode(String.self,forKey:.externalIdentifier)
        }
    }

    override open func encode(to encoder: Encoder) throws {
		try super.encode(to:encoder)
		var container = encoder.container(keyedBy: CodingKeys.self)
		try container.encode(self.success,forKey:.success)
		try container.encode(self.statusCode,forKey:.statusCode)
		try container.encode(self.message,forKey:.message)
		try container.encodeIfPresent(self.data,forKey:.data)
		try container.encode(self.category,forKey:.category)
		try container.encode(self.externalIdentifier,forKey:.externalIdentifier)
    }


    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override  open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["success","statusCode","message","data","category","externalIdentifier"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override  open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "success":
                if let casted=value as? Bool{
                    self.success=casted
                }
            case "statusCode":
                if let casted=value as? Int{
                    self.statusCode=casted
                }
            case "message":
                if let casted=value as? String{
                    self.message=casted
                }
            case "data":
                if let casted=value as? Data{
                    self.data=casted
                }
            case "category":
                if let casted=value as? String{
                    self.category=casted
                }
            case "externalIdentifier":
                if let casted=value as? String{
                    self.externalIdentifier=casted
                }
            default:
                return try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override  open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "success":
               return self.success
            case "statusCode":
               return self.statusCode
            case "message":
               return self.message
            case "data":
               return self.data
            case "category":
               return self.category
            case "externalIdentifier":
               return self.externalIdentifier
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Initializable
     required public init() {
        super.init()
    }
}