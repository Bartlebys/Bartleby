//
//  Completion.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
#endif

// MARK: Bartleby's Commons: A completion state

@objc open class Completion: UnManagedModel {
    // DeclaredTypeName support
    open override class func typeName() -> String {
        return "Completion"
    }

    // Success if set to true
    @objc open dynamic var success: Bool = true

    // The status
    @objc open dynamic var statusCode: Int = StatusOfCompletion.undefined.rawValue

    // The Message
    @objc open dynamic var message: String = ""

    // completion data
    @objc open dynamic var data: Data?

    // A category to discriminate bunch of completion states
    @objc open dynamic var category: String = ""

    // An external identifier
    @objc open dynamic var externalIdentifier: String = ""

    // MARK: - Codable

    public enum CompletionCodingKeys: String, CodingKey {
        case success
        case statusCode
        case message
        case data
        case category
        case externalIdentifier
    }

    public required init(from decoder: Decoder) throws {
        try super.init(from: decoder)
        try quietThrowingChanges {
            let values = try decoder.container(keyedBy: CompletionCodingKeys.self)
            self.success = try values.decode(Bool.self, forKey: .success)
            self.statusCode = try values.decode(Int.self, forKey: .statusCode)
            self.message = try values.decode(String.self, forKey: .message)
            self.data = try values.decodeIfPresent(Data.self, forKey: .data)
            self.category = try values.decode(String.self, forKey: .category)
            self.externalIdentifier = try values.decode(String.self, forKey: .externalIdentifier)
        }
    }

    open override func encode(to encoder: Encoder) throws {
        try super.encode(to: encoder)
        var container = encoder.container(keyedBy: CompletionCodingKeys.self)
        try container.encode(success, forKey: .success)
        try container.encode(statusCode, forKey: .statusCode)
        try container.encode(message, forKey: .message)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encode(category, forKey: .category)
        try container.encode(externalIdentifier, forKey: .externalIdentifier)
    }

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    open override var exposedKeys: [String] {
        var exposed = super.exposedKeys
        exposed.append(contentsOf: ["success", "statusCode", "message", "data", "category", "externalIdentifier"])
        return exposed
    }

    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    open override func setExposedValue(_ value: Any?, forKey key: String) throws {
        switch key {
        case "success":
            if let casted = value as? Bool {
                success = casted
            }
        case "statusCode":
            if let casted = value as? Int {
                statusCode = casted
            }
        case "message":
            if let casted = value as? String {
                message = casted
            }
        case "data":
            if let casted = value as? Data {
                data = casted
            }
        case "category":
            if let casted = value as? String {
                category = casted
            }
        case "externalIdentifier":
            if let casted = value as? String {
                externalIdentifier = casted
            }
        default:
            return try super.setExposedValue(value, forKey: key)
        }
    }

    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    open override func getExposedValueForKey(_ key: String) throws -> Any? {
        switch key {
        case "success":
            return success
        case "statusCode":
            return statusCode
        case "message":
            return message
        case "data":
            return data
        case "category":
            return category
        case "externalIdentifier":
            return externalIdentifier
        default:
            return try super.getExposedValueForKey(key)
        }
    }

    // MARK: - Initializable

    public required init() {
        super.init()
    }
}
