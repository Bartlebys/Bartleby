//
//  ExternalReference.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for b@bartlebys.org
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  Bartleby's | https://bartlebys.org  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
#endif

// MARK: Bartleby's Core: an ExternalReference stores all the necessary data to find a unique resource.
@objc(ExternalReference) public class ExternalReference : JObject{

    // Universal type support
    override public class func typeName() -> String {
        return "ExternalReference"
    }

	//The UID of the referred instance
	dynamic public var iUID:String = "\(Default.NO_UID)"{	 
	    didSet { 
	       if iUID != oldValue {
	            self.provisionChanges(forKey: "iUID",oldValue: oldValue,newValue: iUID) 
	       } 
	    }
	}

	//The typeName of the referred instance
	dynamic public var iTypeName:String = "\(Default.NO_UID)"{	 
	    didSet { 
	       if iTypeName != oldValue {
	            self.provisionChanges(forKey: "iTypeName",oldValue: oldValue,newValue: iTypeName) 
	       } 
	    }
	}



    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
    }

    override public func mapping(_ map: Map) {
        super.mapping(map)
        self.disableSupervisionAndCommit()
		self.iUID <- ( map["iUID"] )
		self.iTypeName <- ( map["iTypeName"] )
        self.enableSuperVisionAndCommit()
    }


    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.disableSupervisionAndCommit()
		self.iUID=String(describing: decoder.decodeObject(of: NSString.self, forKey: "iUID")! as NSString)
		self.iTypeName=String(describing: decoder.decodeObject(of: NSString.self, forKey: "iTypeName")! as NSString)
        self.disableSupervisionAndCommit()
    }

    override public func encode(with coder: NSCoder) {
        super.encode(with:coder)
		coder.encode(self.iUID,forKey:"iUID")
		coder.encode(self.iTypeName,forKey:"iTypeName")
    }

    override public class var supportsSecureCoding:Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return "externalReferences"
    }

    override public var d_collectionName:String{
        return ExternalReference.collectionName
    }


}

