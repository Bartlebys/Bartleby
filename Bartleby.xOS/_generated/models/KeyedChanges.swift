//
//  KeyedChanges.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
	import ObjectMapper
#endif

// MARK: Bartleby's Core: used to keep track of changes in memory when inspecting an App
@objc(KeyedChanges) open class KeyedChanges : BartlebyObject{

    // Universal type support
    override open class func typeName() -> String {
        return "KeyedChanges"
    }

	//the elapsed time since the app has been launched
	dynamic open var elapsed:Double = Bartleby.elapsedTime

	//the key
	dynamic open var key:String = "\(Default.NO_KEY)"

	//A description of the changes that have occured
	dynamic open var changes:String = "\(Default.NO_MESSAGE)"

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["elapsed","key","changes"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "elapsed":
                if let casted=value as? Double{
                    self.elapsed=casted
                }
            case "key":
                if let casted=value as? String{
                    self.key=casted
                }
            case "changes":
                if let casted=value as? String{
                    self.changes=casted
                }
            default:
                return try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "elapsed":
               return self.elapsed
            case "key":
               return self.key
            case "changes":
               return self.changes
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Mappable

    required public init?(map: Map) {
        super.init(map:map)
    }

    override open func mapping(map: Map) {
        super.mapping(map: map)
        self.silentGroupedChanges {
			self.elapsed <- ( map["elapsed"] )
			self.key <- ( map["key"] )
			self.changes <- ( map["changes"] )
        }
    }


    // MARK: - NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.silentGroupedChanges {
			self.elapsed=decoder.decodeDouble(forKey:"elapsed") 
			self.key=String(describing: decoder.decodeObject(of: NSString.self, forKey: "key")! as NSString)
			self.changes=String(describing: decoder.decodeObject(of: NSString.self, forKey: "changes")! as NSString)
        }
    }

    override open func encode(with coder: NSCoder) {
        super.encode(with:coder)
		coder.encode(self.elapsed,forKey:"elapsed")
		coder.encode(self.key,forKey:"key")
		coder.encode(self.changes,forKey:"changes")
    }

    override open class var supportsSecureCoding:Bool{
        return true
    }

     required public init() {
        super.init()
    }

    // MARK: Identifiable

    override open class var collectionName:String{
        return "keyedChanges"
    }

    override open var d_collectionName:String{
        return KeyedChanges.collectionName
    }
}