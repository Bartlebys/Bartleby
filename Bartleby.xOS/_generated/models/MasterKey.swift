//
//  MasterKey.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
#endif

// MARK: Bartleby's Core: Master keys are used to save a password + a key (mostly in user isolated mode)
@objc open class MasterKey : UnManagedModel {

    // DeclaredTypeName support
    override open class func typeName() -> String {
        return "MasterKey"
    }


	//The password
	@objc dynamic open var password:String = "en_EN"

	//the key
	@objc dynamic open var key:String = ""


    // MARK: - Codable


    public enum MasterKeyCodingKeys: String,CodingKey{
		case password
		case key
    }

    required public init(from decoder: Decoder) throws{
		try super.init(from: decoder)
        try self.quietThrowingChanges {
			let values = try decoder.container(keyedBy: MasterKeyCodingKeys.self)
			self.password = try self.decodeCryptedString(codingKey: .password, from: values)
			self.key = try self.decodeCryptedString(codingKey: .key, from: values)
        }
    }

    override open func encode(to encoder: Encoder) throws {
		try super.encode(to:encoder)
		var container = encoder.container(keyedBy: MasterKeyCodingKeys.self)
		try self.encodeCryptedString(value: self.password, codingKey: .password, container: &container)
		try self.encodeCryptedString(value: self.key, codingKey: .key, container: &container)
    }


    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override  open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["password","key"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override  open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "password":
                if let casted=value as? String{
                    self.password=casted
                }
            case "key":
                if let casted=value as? String{
                    self.key=casted
                }
            default:
                return try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override  open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "password":
               return self.password
            case "key":
               return self.key
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Initializable
     required public init() {
        super.init()
    }
}