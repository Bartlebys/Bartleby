//
//  HTTPContext.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
#endif

// MARK: Bartleby's Core: an object that encapsulate the whole http context , request, response

@objc open class HTTPContext: UnManagedModel, Consignable {
    // DeclaredTypeName support
    open override class func typeName() -> String {
        return "HTTPContext"
    }

    // A descriptive string for developer to identify the calling context
    @objc open dynamic var caller: String = Default.NO_NAME

    // A developer set code to provide filtering
    @objc open dynamic var code: Int = Default.MAX_INT

    // The responded HTTP status code
    @objc open dynamic var httpStatusCode: Int = Default.MAX_INT

    // The related url
    @objc open dynamic var relatedURL: URL?

    // The full http request
    @objc open dynamic var request: HTTPRequest?

    // The responded data stringifyed
    @objc open dynamic var responseString: String?

    // An optional message
    @objc open dynamic var message: String?

    // MARK: - Codable

    public enum HTTPContextCodingKeys: String, CodingKey {
        case caller
        case code
        case httpStatusCode
        case relatedURL
        case request
        case responseString
        case message
    }

    public required init(from decoder: Decoder) throws {
        try super.init(from: decoder)
        try quietThrowingChanges {
            let values = try decoder.container(keyedBy: HTTPContextCodingKeys.self)
            self.caller = try values.decode(String.self, forKey: .caller)
            self.code = try values.decode(Int.self, forKey: .code)
            self.httpStatusCode = try values.decode(Int.self, forKey: .httpStatusCode)
            self.relatedURL = try values.decodeIfPresent(URL.self, forKey: .relatedURL)
            self.request = try values.decodeIfPresent(HTTPRequest.self, forKey: .request)
            self.responseString = try values.decodeIfPresent(String.self, forKey: .responseString)
            self.message = try values.decodeIfPresent(String.self, forKey: .message)
        }
    }

    open override func encode(to encoder: Encoder) throws {
        try super.encode(to: encoder)
        var container = encoder.container(keyedBy: HTTPContextCodingKeys.self)
        try container.encode(caller, forKey: .caller)
        try container.encode(code, forKey: .code)
        try container.encode(httpStatusCode, forKey: .httpStatusCode)
        try container.encodeIfPresent(relatedURL, forKey: .relatedURL)
        try container.encodeIfPresent(request, forKey: .request)
        try container.encodeIfPresent(responseString, forKey: .responseString)
        try container.encodeIfPresent(message, forKey: .message)
    }

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    open override var exposedKeys: [String] {
        var exposed = super.exposedKeys
        exposed.append(contentsOf: ["caller", "code", "httpStatusCode", "relatedURL", "request", "responseString", "message"])
        return exposed
    }

    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    open override func setExposedValue(_ value: Any?, forKey key: String) throws {
        switch key {
        case "caller":
            if let casted = value as? String {
                caller = casted
            }
        case "code":
            if let casted = value as? Int {
                code = casted
            }
        case "httpStatusCode":
            if let casted = value as? Int {
                httpStatusCode = casted
            }
        case "relatedURL":
            if let casted = value as? URL {
                relatedURL = casted
            }
        case "request":
            if let casted = value as? HTTPRequest {
                request = casted
            }
        case "responseString":
            if let casted = value as? String {
                responseString = casted
            }
        case "message":
            if let casted = value as? String {
                message = casted
            }
        default:
            return try super.setExposedValue(value, forKey: key)
        }
    }

    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    open override func getExposedValueForKey(_ key: String) throws -> Any? {
        switch key {
        case "caller":
            return caller
        case "code":
            return code
        case "httpStatusCode":
            return httpStatusCode
        case "relatedURL":
            return relatedURL
        case "request":
            return request
        case "responseString":
            return responseString
        case "message":
            return message
        default:
            return try super.getExposedValueForKey(key)
        }
    }

    // MARK: - Initializable

    public required init() {
        super.init()
    }
}
