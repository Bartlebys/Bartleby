//
//  Node.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
	import ObjectMapper
#endif

// MARK: Bartleby's Synchronized File System: a node references a collection of blocks that compose a files, or an alias or a folder
@objc(Node) open class Node : ManagedModel{

    // Universal type support
    override open class func typeName() -> String {
        return "Node"
    }

	//An external ID
	dynamic open var externalID:String?

	//The relative path inside the box
	dynamic open var relativePath:String = "\(Default.NO_PATH)"

	//The Box UID
	dynamic open var boxUID:String = "\(Default.NO_UID)"

	//A relative path for a proxy file (And the resolved path if nature==.alias)
	dynamic open var proxyPath:String?

	//The max size of a block (defines the average size of the block last block excluded)
	dynamic open var blocksMaxSize:Int = Default.MAX_INT

	//The priority level of the node (is applicated to its block)
	dynamic open var priority:Int = 0

	//An ordered list of the Block UIDS
	dynamic open var blocksUIDS:[String] = [String]()

	//The node nature
	public enum Nature:String{
		case file = "file"
		case folder = "folder"
		case alias = "alias"
		case flock = "flock"
	}
	open var nature:Nature = .file

	//Can be extracted from FileAttributeKey.modificationDate
	dynamic open var modificationDate:Date?

	//Can be extracted from FileAttributeKey.creationDate
	dynamic open var creationDate:Date?

	//If nature is .alias the UID of the referent node, else can be set to self.UID or not set at all
	dynamic open var referentNodeUID:String?

	//The list of the authorized User.UID,(if set to ["*"] the block is reputed public). Replicated in any Block to allow pre-downloading during node Upload
	dynamic open var authorized:[String] = [String]()

	//The size of the file
	dynamic open var size:Int = Default.MAX_INT

	//The SHA1 digest of the node is the digest of all its blocks digest.
	dynamic open var digest:String = "\(Default.NO_DIGEST)"{
	    didSet { 
	       if !self.wantsQuietChanges && digest != oldValue {
	            self.provisionChanges(forKey: "digest",oldValue: oldValue,newValue: digest) 
	       } 
	    }
	}

	//If set to true the blocks should be compressed (using LZ4)
	dynamic open var compressedBlocks:Bool = true

	//If set to true the blocks will be crypted (using AES256)
	dynamic open var cryptedBlocks:Bool = true

	//The upload Progression State (not serializable, not supervisable directly by : self.addChangesSuperviser use self.uploadProgression.addChangesSuperviser)
	dynamic open var uploadProgression:Progression = Progression()

	//The Download Progression State (not serializable, not supervisable directly by : self.addChangesSuperviser use self.downloadProgression.addChangesSuperviser)
	dynamic open var downloadProgression:Progression = Progression()

	//Turned to true if there is an upload in progress (used for progress consolidation optimization)
	dynamic open var uploadInProgress:Bool = false

	//Turned to true if there is an upload in progress (used for progress consolidation optimization)
	dynamic open var downloadInProgress:Bool = false

	//Turned to true if there is an Assembly in progress (used for progress consolidation optimization)
	dynamic open var assemblyInProgress:Bool = false

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["externalID","relativePath","boxUID","proxyPath","blocksMaxSize","priority","blocksUIDS","nature","modificationDate","creationDate","referentNodeUID","authorized","size","digest","compressedBlocks","cryptedBlocks","uploadProgression","downloadProgression","uploadInProgress","downloadInProgress","assemblyInProgress"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "externalID":
                if let casted=value as? String{
                    self.externalID=casted
                }
            case "relativePath":
                if let casted=value as? String{
                    self.relativePath=casted
                }
            case "boxUID":
                if let casted=value as? String{
                    self.boxUID=casted
                }
            case "proxyPath":
                if let casted=value as? String{
                    self.proxyPath=casted
                }
            case "blocksMaxSize":
                if let casted=value as? Int{
                    self.blocksMaxSize=casted
                }
            case "priority":
                if let casted=value as? Int{
                    self.priority=casted
                }
            case "blocksUIDS":
                if let casted=value as? [String]{
                    self.blocksUIDS=casted
                }
            case "nature":
                if let casted=value as? Node.Nature{
                    self.nature=casted
                }
            case "modificationDate":
                if let casted=value as? Date{
                    self.modificationDate=casted
                }
            case "creationDate":
                if let casted=value as? Date{
                    self.creationDate=casted
                }
            case "referentNodeUID":
                if let casted=value as? String{
                    self.referentNodeUID=casted
                }
            case "authorized":
                if let casted=value as? [String]{
                    self.authorized=casted
                }
            case "size":
                if let casted=value as? Int{
                    self.size=casted
                }
            case "digest":
                if let casted=value as? String{
                    self.digest=casted
                }
            case "compressedBlocks":
                if let casted=value as? Bool{
                    self.compressedBlocks=casted
                }
            case "cryptedBlocks":
                if let casted=value as? Bool{
                    self.cryptedBlocks=casted
                }
            case "uploadProgression":
                if let casted=value as? Progression{
                    self.uploadProgression=casted
                }
            case "downloadProgression":
                if let casted=value as? Progression{
                    self.downloadProgression=casted
                }
            case "uploadInProgress":
                if let casted=value as? Bool{
                    self.uploadInProgress=casted
                }
            case "downloadInProgress":
                if let casted=value as? Bool{
                    self.downloadInProgress=casted
                }
            case "assemblyInProgress":
                if let casted=value as? Bool{
                    self.assemblyInProgress=casted
                }
            default:
                return try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "externalID":
               return self.externalID
            case "relativePath":
               return self.relativePath
            case "boxUID":
               return self.boxUID
            case "proxyPath":
               return self.proxyPath
            case "blocksMaxSize":
               return self.blocksMaxSize
            case "priority":
               return self.priority
            case "blocksUIDS":
               return self.blocksUIDS
            case "nature":
               return self.nature
            case "modificationDate":
               return self.modificationDate
            case "creationDate":
               return self.creationDate
            case "referentNodeUID":
               return self.referentNodeUID
            case "authorized":
               return self.authorized
            case "size":
               return self.size
            case "digest":
               return self.digest
            case "compressedBlocks":
               return self.compressedBlocks
            case "cryptedBlocks":
               return self.cryptedBlocks
            case "uploadProgression":
               return self.uploadProgression
            case "downloadProgression":
               return self.downloadProgression
            case "uploadInProgress":
               return self.uploadInProgress
            case "downloadInProgress":
               return self.downloadInProgress
            case "assemblyInProgress":
               return self.assemblyInProgress
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Mappable

    required public init?(map: Map) {
        super.init(map:map)
    }

    override open func mapping(map: Map) {
        super.mapping(map: map)
        self.quietChanges {
			self.externalID <- ( map["externalID"] )
			self.relativePath <- ( map["relativePath"] )
			self.boxUID <- ( map["boxUID"] )
			self.proxyPath <- ( map["proxyPath"] )
			self.blocksMaxSize <- ( map["blocksMaxSize"] )
			self.priority <- ( map["priority"] )
			self.blocksUIDS <- ( map["blocksUIDS"] )// @todo marked generatively as Cryptable Should be crypted!
			self.nature <- ( map["nature"] )
			self.modificationDate <- ( map["modificationDate"], ISO8601DateTransform() )
			self.creationDate <- ( map["creationDate"], ISO8601DateTransform() )
			self.referentNodeUID <- ( map["referentNodeUID"] )
			self.authorized <- ( map["authorized"] )// @todo marked generatively as Cryptable Should be crypted!
			self.size <- ( map["size"] )
			self.digest <- ( map["digest"] )
			self.compressedBlocks <- ( map["compressedBlocks"] )
			self.cryptedBlocks <- ( map["cryptedBlocks"] )
        }
    }


    // MARK: - NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.quietChanges {
			self.externalID=String(describing: decoder.decodeObject(of: NSString.self, forKey:"externalID") as NSString?)
			self.relativePath=String(describing: decoder.decodeObject(of: NSString.self, forKey: "relativePath")! as NSString)
			self.boxUID=String(describing: decoder.decodeObject(of: NSString.self, forKey: "boxUID")! as NSString)
			self.proxyPath=String(describing: decoder.decodeObject(of: NSString.self, forKey:"proxyPath") as NSString?)
			self.blocksMaxSize=decoder.decodeInteger(forKey:"blocksMaxSize") 
			self.priority=decoder.decodeInteger(forKey:"priority") 
			self.blocksUIDS=decoder.decodeObject(of: [NSArray.classForCoder(),NSString.self], forKey: "blocksUIDS")! as! [String]
			self.nature=Node.Nature(rawValue:String(describing: decoder.decodeObject(of: NSString.self, forKey: "nature")! as NSString))! 
			self.modificationDate=decoder.decodeObject(of: NSDate.self , forKey:"modificationDate") as Date?
			self.creationDate=decoder.decodeObject(of: NSDate.self , forKey:"creationDate") as Date?
			self.referentNodeUID=String(describing: decoder.decodeObject(of: NSString.self, forKey:"referentNodeUID") as NSString?)
			self.authorized=decoder.decodeObject(of: [NSArray.classForCoder(),NSString.self], forKey: "authorized")! as! [String]
			self.size=decoder.decodeInteger(forKey:"size") 
			self.digest=String(describing: decoder.decodeObject(of: NSString.self, forKey: "digest")! as NSString)
			self.compressedBlocks=decoder.decodeBool(forKey:"compressedBlocks") 
			self.cryptedBlocks=decoder.decodeBool(forKey:"cryptedBlocks") 
        }
    }

    override open func encode(with coder: NSCoder) {
        super.encode(with:coder)
		if let externalID = self.externalID {
			coder.encode(externalID,forKey:"externalID")
		}
		coder.encode(self.relativePath,forKey:"relativePath")
		coder.encode(self.boxUID,forKey:"boxUID")
		if let proxyPath = self.proxyPath {
			coder.encode(proxyPath,forKey:"proxyPath")
		}
		coder.encode(self.blocksMaxSize,forKey:"blocksMaxSize")
		coder.encode(self.priority,forKey:"priority")
		coder.encode(self.blocksUIDS,forKey:"blocksUIDS")
		coder.encode(self.nature.rawValue ,forKey:"nature")
		if let modificationDate = self.modificationDate {
			coder.encode(modificationDate,forKey:"modificationDate")
		}
		if let creationDate = self.creationDate {
			coder.encode(creationDate,forKey:"creationDate")
		}
		if let referentNodeUID = self.referentNodeUID {
			coder.encode(referentNodeUID,forKey:"referentNodeUID")
		}
		coder.encode(self.authorized,forKey:"authorized")
		coder.encode(self.size,forKey:"size")
		coder.encode(self.digest,forKey:"digest")
		coder.encode(self.compressedBlocks,forKey:"compressedBlocks")
		coder.encode(self.cryptedBlocks,forKey:"cryptedBlocks")
    }

    override open class var supportsSecureCoding:Bool{
        return true
    }

     required public init() {
        super.init()
    }

    override open class var collectionName:String{
        return "nodes"
    }

    override open var d_collectionName:String{
        return Node.collectionName
    }
}