//
//  Node.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
	import ObjectMapper
#endif

// MARK: Bartleby's Synchronized File System: a node references a collection of blocks that compose a files, or an alias or a folder
@objc(Node) open class Node : BartlebyObject{

    // Universal type support
    override open class func typeName() -> String {
        return "Node"
    }

	//An external ID
	dynamic open var externalID:String? {
	    didSet { 
	       if externalID != oldValue {
	            self.provisionChanges(forKey: "externalID",oldValue: oldValue,newValue: externalID) 
	       } 
	    }
	}

	//The boxed relative path
	dynamic open var relativePath:String? {
	    didSet { 
	       if relativePath != oldValue {
	            self.provisionChanges(forKey: "relativePath",oldValue: oldValue,newValue: relativePath) 
	       } 
	    }
	}

	//A relative path for a proxy file.
	dynamic open var proxyPath:String?

	//The max size of a block (defines the average size of the block last block excluded)
	dynamic open var blocksMaxSize:Int = Int.max  {
	    didSet { 
	       if blocksMaxSize != oldValue {
	            self.provisionChanges(forKey: "blocksMaxSize",oldValue: oldValue,newValue: blocksMaxSize)  
	       } 
	    }
	}

	//The priority level of the node (is applicated to its block)
	dynamic open var priority:Int = 0  {
	    didSet { 
	       if priority != oldValue {
	            self.provisionChanges(forKey: "priority",oldValue: oldValue,newValue: priority)  
	       } 
	    }
	}

	//An ordered list of the Block UIDS
	dynamic open var blocksUIDS:[String] = [String]()

	//The list of the authorized User.UID,(if set to ["*"] the block is reputed public). Replicated in any Block to allow pre-downloading during node Upload
	dynamic open var authorized:[String] = [String]()

	//The node nature
	public enum Nature:String{
		case file = "file"
		case folder = "folder"
		case alias = "alias"
	}
	open var nature:Nature = .file  {
	    didSet { 
	       if nature != oldValue {
	            self.provisionChanges(forKey: "nature",oldValue: oldValue.rawValue,newValue: nature.rawValue)  
	       } 
	    }
	}

	//The size of the file
	dynamic open var size:Int = Int.max  {
	    didSet { 
	       if size != oldValue {
	            self.provisionChanges(forKey: "size",oldValue: oldValue,newValue: size)  
	       } 
	    }
	}

	//If nature is .alias the UID of the referent node, else can be set to self.UID or not set at all
	dynamic open var referentNodeUID:String? {
	    didSet { 
	       if referentNodeUID != oldValue {
	            self.provisionChanges(forKey: "referentNodeUID",oldValue: oldValue,newValue: referentNodeUID) 
	       } 
	    }
	}

	//If set to true the blocks should be compressed
	dynamic open var compressed:Bool = true  {
	    didSet { 
	       if compressed != oldValue {
	            self.provisionChanges(forKey: "compressed",oldValue: oldValue,newValue: compressed)  
	       } 
	    }
	}

	//If set to true the blocks will be crypted
	dynamic open var cryptedBlocks:Bool = true  {
	    didSet { 
	       if cryptedBlocks != oldValue {
	            self.provisionChanges(forKey: "cryptedBlocks",oldValue: oldValue,newValue: cryptedBlocks)  
	       } 
	    }
	}

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["externalID","relativePath","proxyPath","blocksMaxSize","priority","blocksUIDS","authorized","nature","size","referentNodeUID","compressed","cryptedBlocks"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "externalID":
                if let casted=value as? String{
                    self.externalID=casted
                }
            case "relativePath":
                if let casted=value as? String{
                    self.relativePath=casted
                }
            case "proxyPath":
                if let casted=value as? String{
                    self.proxyPath=casted
                }
            case "blocksMaxSize":
                if let casted=value as? Int{
                    self.blocksMaxSize=casted
                }
            case "priority":
                if let casted=value as? Int{
                    self.priority=casted
                }
            case "blocksUIDS":
                if let casted=value as? [String]{
                    self.blocksUIDS=casted
                }
            case "authorized":
                if let casted=value as? [String]{
                    self.authorized=casted
                }
            case "nature":
                if let casted=value as? Node.Nature{
                    self.nature=casted
                }
            case "size":
                if let casted=value as? Int{
                    self.size=casted
                }
            case "referentNodeUID":
                if let casted=value as? String{
                    self.referentNodeUID=casted
                }
            case "compressed":
                if let casted=value as? Bool{
                    self.compressed=casted
                }
            case "cryptedBlocks":
                if let casted=value as? Bool{
                    self.cryptedBlocks=casted
                }
            default:
                return try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "externalID":
               return self.externalID
            case "relativePath":
               return self.relativePath
            case "proxyPath":
               return self.proxyPath
            case "blocksMaxSize":
               return self.blocksMaxSize
            case "priority":
               return self.priority
            case "blocksUIDS":
               return self.blocksUIDS
            case "authorized":
               return self.authorized
            case "nature":
               return self.nature
            case "size":
               return self.size
            case "referentNodeUID":
               return self.referentNodeUID
            case "compressed":
               return self.compressed
            case "cryptedBlocks":
               return self.cryptedBlocks
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Mappable

    required public init?(map: Map) {
        super.init(map:map)
    }

    override open func mapping(map: Map) {
        super.mapping(map: map)
        self.silentGroupedChanges {
			self.externalID <- ( map["externalID"] )
			self.relativePath <- ( map["relativePath"] )
			self.proxyPath <- ( map["proxyPath"] )
			self.blocksMaxSize <- ( map["blocksMaxSize"] )
			self.priority <- ( map["priority"] )
			self.blocksUIDS <- ( map["blocksUIDS"] )// @todo marked generatively as Cryptable Should be crypted!
			self.authorized <- ( map["authorized"] )// @todo marked generatively as Cryptable Should be crypted!
			self.nature <- ( map["nature"] )
			self.size <- ( map["size"] )
			self.referentNodeUID <- ( map["referentNodeUID"] )
			self.compressed <- ( map["compressed"] )
			self.cryptedBlocks <- ( map["cryptedBlocks"] )
        }
    }


    // MARK: - NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.silentGroupedChanges {
			self.externalID=String(describing: decoder.decodeObject(of: NSString.self, forKey:"externalID") as NSString?)
			self.relativePath=String(describing: decoder.decodeObject(of: NSString.self, forKey:"relativePath") as NSString?)
			self.proxyPath=String(describing: decoder.decodeObject(of: NSString.self, forKey:"proxyPath") as NSString?)
			self.blocksMaxSize=decoder.decodeInteger(forKey:"blocksMaxSize") 
			self.priority=decoder.decodeInteger(forKey:"priority") 
			self.blocksUIDS=decoder.decodeObject(of: [NSArray.classForCoder(),NSString.self], forKey: "blocksUIDS")! as! [String]
			self.authorized=decoder.decodeObject(of: [NSArray.classForCoder(),NSString.self], forKey: "authorized")! as! [String]
			self.nature=Node.Nature(rawValue:String(describing: decoder.decodeObject(of: NSString.self, forKey: "nature")! as NSString))! 
			self.size=decoder.decodeInteger(forKey:"size") 
			self.referentNodeUID=String(describing: decoder.decodeObject(of: NSString.self, forKey:"referentNodeUID") as NSString?)
			self.compressed=decoder.decodeBool(forKey:"compressed") 
			self.cryptedBlocks=decoder.decodeBool(forKey:"cryptedBlocks") 
        }
    }

    override open func encode(with coder: NSCoder) {
        super.encode(with:coder)
		if let externalID = self.externalID {
			coder.encode(externalID,forKey:"externalID")
		}
		if let relativePath = self.relativePath {
			coder.encode(relativePath,forKey:"relativePath")
		}
		if let proxyPath = self.proxyPath {
			coder.encode(proxyPath,forKey:"proxyPath")
		}
		coder.encode(self.blocksMaxSize,forKey:"blocksMaxSize")
		coder.encode(self.priority,forKey:"priority")
		coder.encode(self.blocksUIDS,forKey:"blocksUIDS")
		coder.encode(self.authorized,forKey:"authorized")
		coder.encode(self.nature.rawValue ,forKey:"nature")
		coder.encode(self.size,forKey:"size")
		if let referentNodeUID = self.referentNodeUID {
			coder.encode(referentNodeUID,forKey:"referentNodeUID")
		}
		coder.encode(self.compressed,forKey:"compressed")
		coder.encode(self.cryptedBlocks,forKey:"cryptedBlocks")
    }

    override open class var supportsSecureCoding:Bool{
        return true
    }

     required public init() {
        super.init()
    }

    // MARK: Identifiable

    override open class var collectionName:String{
        return "nodes"
    }

    override open var d_collectionName:String{
        return Node.collectionName
    }
}