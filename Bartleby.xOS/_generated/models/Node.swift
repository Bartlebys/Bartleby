//
//  Node.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
#endif

// MARK: Bartleby's Synchronized File System: a node references a collection of blocks that compose a files, or an alias or a folder

@objc open class Node: ManagedModel {
    // Universal type support
    open override class func typeName() -> String {
        return "Node"
    }

    // The type of node is a classifier equivalent to a file extension.
    @objc open dynamic var type: String = "" {
        didSet {
            if !self.wantsQuietChanges && type != oldValue {
                self.provisionChanges(forKey: "type", oldValue: oldValue, newValue: type)
            }
        }
    }

    // The relative path inside the box
    @objc open dynamic var relativePath: String = Default.NO_PATH

    // A relative path for a proxy file (And the resolved path if nature==.alias)
    @objc open dynamic var proxyPath: String?

    // The max size of a block (defines the average size of the block last block excluded)
    @objc open dynamic var blocksMaxSize: Int = Default.MAX_INT

    // The total number of blocks
    @objc open dynamic var numberOfBlocks: Int = 0

    // The priority level of the node (is applicated to its block)
    @objc open dynamic var priority: Int = 0

    // The node nature
    public enum Nature: String {
        case file
        case folder
        case alias
        case flock
    }

    open var nature: Nature = .file

    // Can be extracted from FileAttributeKey.modificationDate
    @objc open dynamic var modificationDate: Date?

    // Can be extracted from FileAttributeKey.creationDate
    @objc open dynamic var creationDate: Date?

    // If nature is .alias the UID of the referent node, else can be set to self.UID or not set at all
    @objc open dynamic var referentNodeUID: String?

    // The list of the authorized User.UID,(if set to ["*"] the block is reputed public). Replicated in any Block to allow pre-downloading during node Upload
    @objc open dynamic var authorized: [String] = [String]()

    // The size of the file
    @objc open dynamic var size: Int = Default.MAX_INT

    // The SHA1 digest of the node is the digest of all its blocks digest.
    @objc open dynamic var digest: String = Default.NO_DIGEST {
        didSet {
            if !self.wantsQuietChanges && digest != oldValue {
                self.provisionChanges(forKey: "digest", oldValue: oldValue, newValue: digest)
            }
        }
    }

    // If set to true the blocks should be compressed (using LZ4)
    @objc open dynamic var compressedBlocks: Bool = true

    // If set to true the blocks will be crypted (using AES256)
    @objc open dynamic var cryptedBlocks: Bool = true

    // The upload Progression State (not serializable, not supervisable directly by : self.addChangesSuperviser use self.uploadProgression.addChangesSuperviser)
    @objc open dynamic var uploadProgression: Progression = Progression()

    // The Download Progression State (not serializable, not supervisable directly by : self.addChangesSuperviser use self.downloadProgression.addChangesSuperviser)
    @objc open dynamic var downloadProgression: Progression = Progression()

    // Turned to true if there is an upload in progress (used for progress consolidation optimization)
    @objc open dynamic var uploadInProgress: Bool = false

    // Turned to true if there is an upload in progress (used for progress consolidation optimization)
    @objc open dynamic var downloadInProgress: Bool = false

    // Turned to true if there is an Assembly in progress (used for progress consolidation optimization)
    @objc open dynamic var assemblyInProgress: Bool = false

    // MARK: - Codable

    public enum NodeCodingKeys: String, CodingKey {
        case type
        case relativePath
        case proxyPath
        case blocksMaxSize
        case numberOfBlocks
        case priority
        case nature
        case modificationDate
        case creationDate
        case referentNodeUID
        case authorized
        case size
        case digest
        case compressedBlocks
        case cryptedBlocks
        case uploadProgression
        case downloadProgression
        case uploadInProgress
        case downloadInProgress
        case assemblyInProgress
    }

    public required init(from decoder: Decoder) throws {
        try super.init(from: decoder)
        try quietThrowingChanges {
            let values = try decoder.container(keyedBy: NodeCodingKeys.self)
            self.type = try values.decode(String.self, forKey: .type)
            self.relativePath = try values.decode(String.self, forKey: .relativePath)
            self.proxyPath = try values.decodeIfPresent(String.self, forKey: .proxyPath)
            self.blocksMaxSize = try values.decode(Int.self, forKey: .blocksMaxSize)
            self.numberOfBlocks = try values.decode(Int.self, forKey: .numberOfBlocks)
            self.priority = try values.decode(Int.self, forKey: .priority)
            self.nature = Node.Nature(rawValue: try values.decode(String.self, forKey: .nature)) ?? .file
            self.modificationDate = try values.decodeIfPresent(Date.self, forKey: .modificationDate)
            self.creationDate = try values.decodeIfPresent(Date.self, forKey: .creationDate)
            self.referentNodeUID = try values.decodeIfPresent(String.self, forKey: .referentNodeUID)
            self.authorized = try values.decode([String].self, forKey: .authorized)
            self.size = try values.decode(Int.self, forKey: .size)
            self.digest = try values.decode(String.self, forKey: .digest)
            self.compressedBlocks = try values.decode(Bool.self, forKey: .compressedBlocks)
            self.cryptedBlocks = try values.decode(Bool.self, forKey: .cryptedBlocks)
        }
    }

    open override func encode(to encoder: Encoder) throws {
        try super.encode(to: encoder)
        var container = encoder.container(keyedBy: NodeCodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(relativePath, forKey: .relativePath)
        try container.encodeIfPresent(proxyPath, forKey: .proxyPath)
        try container.encode(blocksMaxSize, forKey: .blocksMaxSize)
        try container.encode(numberOfBlocks, forKey: .numberOfBlocks)
        try container.encode(priority, forKey: .priority)
        try container.encode(nature.rawValue, forKey: .nature)
        try container.encodeIfPresent(modificationDate, forKey: .modificationDate)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(referentNodeUID, forKey: .referentNodeUID)
        try container.encode(authorized, forKey: .authorized)
        try container.encode(size, forKey: .size)
        try container.encode(digest, forKey: .digest)
        try container.encode(compressedBlocks, forKey: .compressedBlocks)
        try container.encode(cryptedBlocks, forKey: .cryptedBlocks)
    }

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    open override var exposedKeys: [String] {
        var exposed = super.exposedKeys
        exposed.append(contentsOf: ["type", "relativePath", "proxyPath", "blocksMaxSize", "numberOfBlocks", "priority", "nature", "modificationDate", "creationDate", "referentNodeUID", "authorized", "size", "digest", "compressedBlocks", "cryptedBlocks", "uploadProgression", "downloadProgression", "uploadInProgress", "downloadInProgress", "assemblyInProgress"])
        return exposed
    }

    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    open override func setExposedValue(_ value: Any?, forKey key: String) throws {
        switch key {
        case "type":
            if let casted = value as? String {
                type = casted
            }
        case "relativePath":
            if let casted = value as? String {
                relativePath = casted
            }
        case "proxyPath":
            if let casted = value as? String {
                proxyPath = casted
            }
        case "blocksMaxSize":
            if let casted = value as? Int {
                blocksMaxSize = casted
            }
        case "numberOfBlocks":
            if let casted = value as? Int {
                numberOfBlocks = casted
            }
        case "priority":
            if let casted = value as? Int {
                priority = casted
            }
        case "nature":
            if let casted = value as? Node.Nature {
                nature = casted
            }
        case "modificationDate":
            if let casted = value as? Date {
                modificationDate = casted
            }
        case "creationDate":
            if let casted = value as? Date {
                creationDate = casted
            }
        case "referentNodeUID":
            if let casted = value as? String {
                referentNodeUID = casted
            }
        case "authorized":
            if let casted = value as? [String] {
                authorized = casted
            }
        case "size":
            if let casted = value as? Int {
                size = casted
            }
        case "digest":
            if let casted = value as? String {
                digest = casted
            }
        case "compressedBlocks":
            if let casted = value as? Bool {
                compressedBlocks = casted
            }
        case "cryptedBlocks":
            if let casted = value as? Bool {
                cryptedBlocks = casted
            }
        case "uploadProgression":
            if let casted = value as? Progression {
                uploadProgression = casted
            }
        case "downloadProgression":
            if let casted = value as? Progression {
                downloadProgression = casted
            }
        case "uploadInProgress":
            if let casted = value as? Bool {
                uploadInProgress = casted
            }
        case "downloadInProgress":
            if let casted = value as? Bool {
                downloadInProgress = casted
            }
        case "assemblyInProgress":
            if let casted = value as? Bool {
                assemblyInProgress = casted
            }
        default:
            return try super.setExposedValue(value, forKey: key)
        }
    }

    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    open override func getExposedValueForKey(_ key: String) throws -> Any? {
        switch key {
        case "type":
            return type
        case "relativePath":
            return relativePath
        case "proxyPath":
            return proxyPath
        case "blocksMaxSize":
            return blocksMaxSize
        case "numberOfBlocks":
            return numberOfBlocks
        case "priority":
            return priority
        case "nature":
            return nature
        case "modificationDate":
            return modificationDate
        case "creationDate":
            return creationDate
        case "referentNodeUID":
            return referentNodeUID
        case "authorized":
            return authorized
        case "size":
            return size
        case "digest":
            return digest
        case "compressedBlocks":
            return compressedBlocks
        case "cryptedBlocks":
            return cryptedBlocks
        case "uploadProgression":
            return uploadProgression
        case "downloadProgression":
            return downloadProgression
        case "uploadInProgress":
            return uploadInProgress
        case "downloadInProgress":
            return downloadInProgress
        case "assemblyInProgress":
            return assemblyInProgress
        default:
            return try super.getExposedValueForKey(key)
        }
    }

    // MARK: - Initializable

    public required init() {
        super.init()
    }

    // MARK: - UniversalType

    open override class var collectionName: String {
        return "nodes"
    }

    open override var d_collectionName: String {
        return Node.collectionName
    }
}
