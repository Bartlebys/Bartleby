//
//  PushOperation.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
		import Alamofire
#endif

// MARK: Bartleby's Core: an object used to provision serialized operation.
@objc(PushOperation) open class PushOperation : ManagedModel{

    // Universal type support
    override open class func typeName() -> String {
        return "PushOperation"
    }

	//The unique identifier of the related Command
	@objc dynamic open var commandUID:String?

	//The dictionary representation of a serialized action call
	@objc dynamic open var toDictionary:[String:Any]?

	//The last response serialized data
	open var responseData:Data?

	//The completion state of the operation
	@objc dynamic open var completionState:Completion?

	//The invocation Status None: on creation, Pending: can be pushed, InProgress: the endpoint has been called, Completed : The end point call has been completed
	public enum Status:String{
		case none = "none"
		case pending = "pending"
		case inProgress = "inProgress"
		case completed = "completed"
	}
	open var status:Status = .none

	//The invocation counter
	@objc dynamic open var counter:Int = -1

	//The creationdate
	@objc dynamic open var creationDate:Date?

	//The last invocation date
	@objc dynamic open var lastInvocationDate:Date?


    // MARK: - Codable


    enum PushOperationCodingKeys: String,CodingKey{
		case commandUID
		case toDictionary
		case responseData
		case completionState
		case status
		case counter
		case creationDate
		case lastInvocationDate
    }

    required public init(from decoder: Decoder) throws{
		try super.init(from: decoder)
        try self.quietThrowingChanges {
			let values = try decoder.container(keyedBy: PushOperationCodingKeys.self)
			self.commandUID = try values.decode(String.self,forKey:.commandUID)
			self.toDictionary = try values.decode([String:Any].self,forKey:.toDictionary)
			self.responseData = try values.decode(Data.self,forKey:.responseData)
			self.completionState = try values.decode(Completion.self,forKey:.completionState)
			self.status = PushOperation.Status(rawValue: try values.decode(String.self,forKey:.status)) ?? .none
			self.counter = try values.decode(Int.self,forKey:.counter)
			self.creationDate = try values.decode(Date.self,forKey:.creationDate)
			self.lastInvocationDate = try values.decode(Date.self,forKey:.lastInvocationDate)
        }
    }

    override open func encode(to encoder: Encoder) throws {
		try super.encode(to:encoder)
		var container = encoder.container(keyedBy: PushOperationCodingKeys.self)
		try container.encodeIfPresent(self.commandUID,forKey:.commandUID)
		try container.encodeIfPresent(self.toDictionary,forKey:.toDictionary)
		try container.encodeIfPresent(self.responseData,forKey:.responseData)
		try container.encodeIfPresent(self.completionState,forKey:.completionState)
		try container.encodeIfPresent(self.status.rawValue ,forKey:.status)
		try container.encodeIfPresent(self.counter,forKey:.counter)
		try container.encodeIfPresent(self.creationDate,forKey:.creationDate)
		try container.encodeIfPresent(self.lastInvocationDate,forKey:.lastInvocationDate)
    }


    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override  open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["commandUID","toDictionary","responseData","completionState","status","counter","creationDate","lastInvocationDate"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override  open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "commandUID":
                if let casted=value as? String{
                    self.commandUID=casted
                }
            case "toDictionary":
                if let casted=value as? [String:Any]{
                    self.toDictionary=casted
                }
            case "responseData":
                if let casted=value as? Data{
                    self.responseData=casted
                }
            case "completionState":
                if let casted=value as? Completion{
                    self.completionState=casted
                }
            case "status":
                if let casted=value as? PushOperation.Status{
                    self.status=casted
                }
            case "counter":
                if let casted=value as? Int{
                    self.counter=casted
                }
            case "creationDate":
                if let casted=value as? Date{
                    self.creationDate=casted
                }
            case "lastInvocationDate":
                if let casted=value as? Date{
                    self.lastInvocationDate=casted
                }
            default:
                return try super.setExposedValue(value, forKey: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override  open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "commandUID":
               return self.commandUID
            case "toDictionary":
               return self.toDictionary
            case "responseData":
               return self.responseData
            case "completionState":
               return self.completionState
            case "status":
               return self.status
            case "counter":
               return self.counter
            case "creationDate":
               return self.creationDate
            case "lastInvocationDate":
               return self.lastInvocationDate
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Initializable
    required public init() {
        super.init()
    }

    // MARK: - UniversalType
    override  open class var collectionName:String{
        return "pushOperations"
    }

    override  open var d_collectionName:String{
        return PushOperation.collectionName
    }
}