//
//  PushOperation.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for [Benoit Pereira da Silva] (https://pereira-da-silva.com/contact)
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  [Bartleby's org] (https://bartlebys.org)   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
#endif

// MARK: Bartleby's Core: an object used to provision serialized operation.

@objc open class PushOperation: ManagedModel {
    // Universal type support
    open override class func typeName() -> String {
        return "PushOperation"
    }

    // The store type of the operation
    @objc open dynamic var operationName: String = Default.NO_NAME

    // The unique identifier of the related Command
    @objc open dynamic var commandUID: String?

    // The serialized action call
    @objc open dynamic var serialized: Data?

    // The last response serialized data
    open var responseData: Data?

    // The completion state of the operation
    @objc open dynamic var completionState: Completion?

    // The invocation Status None: on creation, Pending: can be pushed, InProgress: the endpoint has been called, Completed : The end point call has been completed
    public enum Status: String {
        case none
        case pending
        case inProgress
        case completed
    }

    open var status: Status = .none

    // The invocation counter
    @objc open dynamic var counter: Int = -1

    // The creationdate
    @objc open dynamic var creationDate: Date?

    // The last invocation date
    @objc open dynamic var lastInvocationDate: Date?

    // MARK: - Codable

    public enum PushOperationCodingKeys: String, CodingKey {
        case operationName
        case commandUID
        case serialized
        case responseData
        case completionState
        case status
        case counter
        case creationDate
        case lastInvocationDate
    }

    public required init(from decoder: Decoder) throws {
        try super.init(from: decoder)
        try quietThrowingChanges {
            let values = try decoder.container(keyedBy: PushOperationCodingKeys.self)
            self.operationName = try values.decode(String.self, forKey: .operationName)
            self.commandUID = try values.decodeIfPresent(String.self, forKey: .commandUID)
            self.serialized = try values.decodeIfPresent(Data.self, forKey: .serialized)
            self.responseData = try values.decodeIfPresent(Data.self, forKey: .responseData)
            self.completionState = try values.decodeIfPresent(Completion.self, forKey: .completionState)
            self.status = PushOperation.Status(rawValue: try values.decode(String.self, forKey: .status)) ?? .none
            self.counter = try values.decode(Int.self, forKey: .counter)
            self.creationDate = try values.decodeIfPresent(Date.self, forKey: .creationDate)
            self.lastInvocationDate = try values.decodeIfPresent(Date.self, forKey: .lastInvocationDate)
        }
    }

    open override func encode(to encoder: Encoder) throws {
        try super.encode(to: encoder)
        var container = encoder.container(keyedBy: PushOperationCodingKeys.self)
        try container.encode(operationName, forKey: .operationName)
        try container.encodeIfPresent(commandUID, forKey: .commandUID)
        try container.encodeIfPresent(serialized, forKey: .serialized)
        try container.encodeIfPresent(responseData, forKey: .responseData)
        try container.encodeIfPresent(completionState, forKey: .completionState)
        try container.encode(status.rawValue, forKey: .status)
        try container.encode(counter, forKey: .counter)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(lastInvocationDate, forKey: .lastInvocationDate)
    }

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    open override var exposedKeys: [String] {
        var exposed = super.exposedKeys
        exposed.append(contentsOf: ["operationName", "commandUID", "serialized", "responseData", "completionState", "status", "counter", "creationDate", "lastInvocationDate"])
        return exposed
    }

    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    open override func setExposedValue(_ value: Any?, forKey key: String) throws {
        switch key {
        case "operationName":
            if let casted = value as? String {
                operationName = casted
            }
        case "commandUID":
            if let casted = value as? String {
                commandUID = casted
            }
        case "serialized":
            if let casted = value as? Data {
                serialized = casted
            }
        case "responseData":
            if let casted = value as? Data {
                responseData = casted
            }
        case "completionState":
            if let casted = value as? Completion {
                completionState = casted
            }
        case "status":
            if let casted = value as? PushOperation.Status {
                status = casted
            }
        case "counter":
            if let casted = value as? Int {
                counter = casted
            }
        case "creationDate":
            if let casted = value as? Date {
                creationDate = casted
            }
        case "lastInvocationDate":
            if let casted = value as? Date {
                lastInvocationDate = casted
            }
        default:
            return try super.setExposedValue(value, forKey: key)
        }
    }

    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    open override func getExposedValueForKey(_ key: String) throws -> Any? {
        switch key {
        case "operationName":
            return operationName
        case "commandUID":
            return commandUID
        case "serialized":
            return serialized
        case "responseData":
            return responseData
        case "completionState":
            return completionState
        case "status":
            return status
        case "counter":
            return counter
        case "creationDate":
            return creationDate
        case "lastInvocationDate":
            return lastInvocationDate
        default:
            return try super.getExposedValueForKey(key)
        }
    }

    // MARK: - Initializable

    public required init() {
        super.init()
    }

    // MARK: - UniversalType

    open override class var collectionName: String {
        return "pushOperations"
    }

    open override var d_collectionName: String {
        return PushOperation.collectionName
    }
}
