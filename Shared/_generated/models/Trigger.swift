//
//  Trigger.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for benoit@pereira-da-silva.com
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
// WE TRY TO GENERATE ANY REPETITIVE CODE AND TO IMPROVE THE QUALITY ITERATIVELY
//
// Copyright (c) 2015  Chaosmos | https://chaosmos.fr  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
#endif

// MARK: Model Trigger
@objc(Trigger) public class Trigger : BaseObject{


	//A message that can be injected for monitoring or external observation
	public var associatedMessage:String?
	//The index is injected server side.
	public var index:Int?
	//A UID characterizing the observable
	public var observableUID:String?
	//The alias to the created entities
	public var created:[Alias] = arrayOfAliases()
	//The alias to the updated entities
	public var updated:[Alias] = arrayOfAliases()
	//The alias to the deleted entities
	public var deleted:[Alias] = arrayOfAliases()


    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
        mapping(map)
    }

    override public func mapping(map: Map) {
        super.mapping(map)
		self.associatedMessage <- map["associatedMessage"]
		self.index <- map["index"]
		self.observableUID <- map["observableUID"]
		self.created <- map["created"]
		self.updated <- map["updated"]
		self.deleted <- map["deleted"]
    }


    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
		self.associatedMessage=String(decoder.decodeObjectOfClass(NSString.self, forKey:"associatedMessage") as NSString?)
		self.index=decoder.decodeIntegerForKey("index") 
		self.observableUID=String(decoder.decodeObjectOfClass(NSString.self, forKey:"observableUID") as NSString?)
		self.created=decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),Alias.classForCoder()]), forKey: "created")! as! [Alias]
		self.updated=decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),Alias.classForCoder()]), forKey: "updated")! as! [Alias]
		self.deleted=decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),Alias.classForCoder()]), forKey: "deleted")! as! [Alias]

    }

    override public func encodeWithCoder(coder: NSCoder) {
        super.encodeWithCoder(coder)
		if let associatedMessage = self.associatedMessage {
			coder.encodeObject(associatedMessage,forKey:"associatedMessage")
		}
		if let index = self.index {
			coder.encodeInteger(index,forKey:"index")
		}
		if let observableUID = self.observableUID {
			coder.encodeObject(observableUID,forKey:"observableUID")
		}
		coder.encodeObject(self.created,forKey:"created")
		coder.encodeObject(self.updated,forKey:"updated")
		coder.encodeObject(self.deleted,forKey:"deleted")
    }


    override public class func supportsSecureCoding() -> Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return "triggers"
    }

    override public var d_collectionName:String{
        return Trigger.collectionName
    }


    // MARK: Persistent

    override public func toPersistentRepresentation()->(UID:String,collectionName:String,serializedUTF8String:String,A:Double,B:Double,C:Double,D:Double,E:Double,S:String){
        var r=super.toPersistentRepresentation()
        r.A=NSDate().timeIntervalSince1970
        return r
    }

}

