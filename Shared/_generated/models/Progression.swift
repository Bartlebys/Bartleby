//
//  Progression.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for benoit@pereira-da-silva.com
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
// WE TRY TO GENERATE ANY REPETITIVE CODE AND TO IMPROVE THE QUALITY ITERATIVELY
//
// Copyright (c) 2015  Chaosmos | https://chaosmos.fr  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
#endif

// MARK: Model Progression
@objc(Progression) public class Progression : BaseObject{


	//Index of the task
	public var currentTaskIndex:Int = 0
	//Total number of tasks
	public var totalTaskCount:Int = 0
	//0 to 1
	dynamic public var currentTaskProgress:Double = 0
	//The Message
	dynamic public var message:String = ""
	//The associated data
	public var data:NSData?


    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
        mapping(map)
    }

    override public func mapping(map: Map) {
        super.mapping(map)
		currentTaskIndex <- map["currentTaskIndex"]
		totalTaskCount <- map["totalTaskCount"]
		currentTaskProgress <- map["currentTaskProgress"]
		message <- map["message"]
		data <- (map["data"],Base64DataTransform())
    }


    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
		currentTaskIndex=decoder.decodeIntegerForKey("currentTaskIndex") 
		totalTaskCount=decoder.decodeIntegerForKey("totalTaskCount") 
		currentTaskProgress=decoder.decodeDoubleForKey("currentTaskProgress") 
		message=String(decoder.decodeObjectOfClass(NSString.self, forKey: "message")! as NSString)
		data=decoder.decodeObjectOfClass(NSData.self, forKey:"data") as NSData?

    }

    override public func encodeWithCoder(coder: NSCoder) {
        super.encodeWithCoder(coder)
		coder.encodeInteger(currentTaskIndex,forKey:"currentTaskIndex")
		coder.encodeInteger(totalTaskCount,forKey:"totalTaskCount")
		coder.encodeDouble(currentTaskProgress,forKey:"currentTaskProgress")
		coder.encodeObject(message,forKey:"message")
		if let data = self.data {
			coder.encodeObject(data,forKey:"data")
		}
    }


    override public class func supportsSecureCoding() -> Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return "progressions"
    }

    override public var d_collectionName:String{
        return Progression.collectionName
    }


    // MARK: Persistent

    override public func toPersistentRepresentation()->(UID:String,collectionName:String,serializedUTF8String:String,A:Double,B:Double,C:Double,D:Double,E:Double,S:String){
        var r=super.toPersistentRepresentation()
        r.A=NSDate().timeIntervalSince1970
        return r
    }

}

