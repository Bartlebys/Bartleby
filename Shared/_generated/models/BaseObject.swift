//
//  BaseObject.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for benoit@pereira-da-silva.com
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
// WE TRY TO GENERATE ANY REPETITIVE CODE AND TO IMPROVE THE QUALITY ITERATIVELY
//
// Copyright (c) 2015  Chaosmos | https://chaosmos.fr  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
#endif

// MARK: Model BaseObject
@objc(BaseObject) public class BaseObject : JObject{


	//Collectible protocol: committed 
	public var committed:Bool = false
	//Collectible protocol: distributed 
	public var distributed:Bool = false
	//Collectible protocol: The Creator UID
	public var creatorUID:String = "\(Default.NO_UID)"
	//Collectible protocol: The Group UID
	public var groupUID:String = "\(Default.NO_UID)"
	//The class name of the reference
	public var summary:String?


    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
        mapping(map)
    }

    override public func mapping(map: Map) {
        super.mapping(map)
		committed <- map["committed"]
		distributed <- map["distributed"]
		creatorUID <- map["creatorUID"]
		groupUID <- map["groupUID"]
		summary <- map["summary"]
    }


    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
		committed=decoder.decodeBoolForKey("committed") 
		distributed=decoder.decodeBoolForKey("distributed") 
		creatorUID=String(decoder.decodeObjectOfClass(NSString.self, forKey: "creatorUID")! as NSString)
		groupUID=String(decoder.decodeObjectOfClass(NSString.self, forKey: "groupUID")! as NSString)
		summary=String(decoder.decodeObjectOfClass(NSString.self, forKey:"summary") as NSString?)

    }

    override public func encodeWithCoder(coder: NSCoder) {
        super.encodeWithCoder(coder)
		coder.encodeBool(committed,forKey:"committed")
		coder.encodeBool(distributed,forKey:"distributed")
		coder.encodeObject(creatorUID,forKey:"creatorUID")
		coder.encodeObject(groupUID,forKey:"groupUID")
		if let summary = self.summary {
			coder.encodeObject(summary,forKey:"summary")
		}
    }


    override public class func supportsSecureCoding() -> Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return "baseObjects"
    }

    override public var d_collectionName:String{
        return BaseObject.collectionName
    }


    // MARK: Persistent

    override public func toPersistentRepresentation()->(UID:String,collectionName:String,serializedUTF8String:String,A:Double,B:Double,C:Double,D:Double,E:Double,S:String){
        var r=super.toPersistentRepresentation()
        r.A=NSDate().timeIntervalSince1970
        return r
    }

}

