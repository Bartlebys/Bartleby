//
//  TasksGroup.swift
//  Bartleby
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for benoit@pereira-da-silva.com
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
// WE TRY TO GENERATE ANY REPETITIVE CODE AND TO IMPROVE THE QUALITY ITERATIVELY
//
// Copyright (c) 2015  Chaosmos | https://chaosmos.fr  All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
import Alamofire
import ObjectMapper
#endif

// MARK: Model TasksGroup
@objc(TasksGroup) public class TasksGroup : BaseObject{


	//AbstractTask.Status (TODO @BPDS find a better solution?)
	public var status:String = "\(AbstractTask.Status.New)"
	//AbstractTask.Priority(TODO @BPDS find a better solution?)
	public var priority:String = "\(AbstractTask.Priority.Default)"
	//A collection of Concrete Tasks
	public var tasks:[Task] = [Task]()
	//The progression state of the group
	public var progressionState:Progression = Progression()
	//The completion state of the group
	public var completionState:Completion = Completion()
	//The group name
	public var name:String?


    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
        mapping(map)
    }

    override public func mapping(map: Map) {
        super.mapping(map)
		status <- map["status"]
		priority <- map["priority"]
		tasks <- map["tasks"]
		progressionState <- map["progressionState"]
		completionState <- map["completionState"]
		name <- map["name"]
    }


    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
		status=String(decoder.decodeObjectOfClass(NSString.self, forKey: "status")! as NSString)
		priority=String(decoder.decodeObjectOfClass(NSString.self, forKey: "priority")! as NSString)
		tasks=decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),Task.classForCoder()]), forKey: "tasks")! as! [Task]
		progressionState=decoder.decodeObjectOfClass(Progression.self, forKey: "progressionState")! 
		completionState=decoder.decodeObjectOfClass(Completion.self, forKey: "completionState")! 
		name=String(decoder.decodeObjectOfClass(NSString.self, forKey:"name") as NSString?)

    }

    override public func encodeWithCoder(coder: NSCoder) {
        super.encodeWithCoder(coder)
		coder.encodeObject(status,forKey:"status")
		coder.encodeObject(priority,forKey:"priority")
		coder.encodeObject(tasks,forKey:"tasks")
		coder.encodeObject(progressionState,forKey:"progressionState")
		coder.encodeObject(completionState,forKey:"completionState")
		if let name = self.name {
			coder.encodeObject(name,forKey:"name")
		}
    }


    override public class func supportsSecureCoding() -> Bool{
        return true
    }


    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return "tasksGroups"
    }

    override public var d_collectionName:String{
        return TasksGroup.collectionName
    }


    // MARK: Persistent

    override public func toPersistentRepresentation()->(UID:String,collectionName:String,serializedUTF8String:String,A:Double,B:Double,C:Double,D:Double,E:Double,S:String){
        var r=super.toPersistentRepresentation()
        r.A=NSDate().timeIntervalSince1970
        return r
    }

}

