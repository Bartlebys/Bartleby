//
//  BsyncDirectives.swift
//  Bsync
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for Benoit Pereira da Silva https://pereira-da-silva.com/contact
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  Bartleby's https://bartlebys.org   All rights reserved.
//
import Foundation
#if !USE_EMBEDDED_MODULES
	import Alamofire
	import ObjectMapper
	import BartlebyKit
#endif

// MARK: Synchronization directives
@objc(BsyncDirectives) open class BsyncDirectives : BsyncCredentials{

    // Universal type support
    override open class func typeName() -> String {
        return "BsyncDirectives"
    }

	//The possible distants schemes
	static open let distantSchemes:[String] = ["http", "https", "ftp", "ftps"]

	//The default file name is just a convention
	static open let DEFAULT_FILE_NAME:String = ".directives"

	// TODO: @bpds @md #bsync Change url to not optional
	open var sourceURL:URL?

	//The destination url
	open var destinationURL:URL?

	//the name of the hashmap view 
	open var hashMapViewName:String?

	//the name of the hashmap view 
	open var computeTheHashMap:Bool = true

	//the name of the hashmap view 
	open var automaticTreeCreation:Bool = true

    // MARK: - Exposed (Bartleby's KVC like generative implementation)

    /// Return all the exposed instance variables keys. (Exposed == public and modifiable).
    override open var exposedKeys:[String] {
        var exposed=super.exposedKeys
        exposed.append(contentsOf:["sourceURL","destinationURL","hashMapViewName","computeTheHashMap","automaticTreeCreation"])
        return exposed
    }


    /// Set the value of the given key
    ///
    /// - parameter value: the value
    /// - parameter key:   the key
    ///
    /// - throws: throws an Exception when the key is not exposed
    override open func setExposedValue(_ value:Any?, forKey key: String) throws {
        switch key {
            case "sourceURL":
                if let casted=value as? URL{
                    self.sourceURL=casted
                }
            case "destinationURL":
                if let casted=value as? URL{
                    self.destinationURL=casted
                }
            case "hashMapViewName":
                if let casted=value as? String{
                    self.hashMapViewName=casted
                }
            case "computeTheHashMap":
                if let casted=value as? Bool{
                    self.computeTheHashMap=casted
                }
            case "automaticTreeCreation":
                if let casted=value as? Bool{
                    self.automaticTreeCreation=casted
                }
            default:
                throw ObjectExpositionError.UnknownKey(key: key)
        }
    }


    /// Returns the value of an exposed key.
    ///
    /// - parameter key: the key
    ///
    /// - throws: throws Exception when the key is not exposed
    ///
    /// - returns: returns the value
    override open func getExposedValueForKey(_ key:String) throws -> Any?{
        switch key {
            case "sourceURL":
               return self.sourceURL
            case "destinationURL":
               return self.destinationURL
            case "hashMapViewName":
               return self.hashMapViewName
            case "computeTheHashMap":
               return self.computeTheHashMap
            case "automaticTreeCreation":
               return self.automaticTreeCreation
            default:
                return try super.getExposedValueForKey(key)
        }
    }
    // MARK: - Mappable

    required public init?(map: Map) {
        super.init(map:map)
    }

    override open func mapping(map: Map) {
        super.mapping(map: map)
        self.silentGroupedChanges {
			self.sourceURL <- ( map["sourceURL"], URLTransform() )
			self.destinationURL <- ( map["destinationURL"], URLTransform() )
			self.hashMapViewName <- ( map["hashMapViewName"] )
			self.computeTheHashMap <- ( map["computeTheHashMap"] )
			self.automaticTreeCreation <- ( map["automaticTreeCreation"] )
        }
    }


    // MARK: - NSSecureCoding

    required public init?(coder decoder: NSCoder) {super.init(coder: decoder)
        self.silentGroupedChanges {
			self.sourceURL=decoder.decodeObject(of: NSURL.self, forKey:"sourceURL") as URL?
			self.destinationURL=decoder.decodeObject(of: NSURL.self, forKey:"destinationURL") as URL?
			self.hashMapViewName=String(describing: decoder.decodeObject(of: NSString.self, forKey:"hashMapViewName") as NSString?)
			self.computeTheHashMap=decoder.decodeBool(forKey:"computeTheHashMap") 
			self.automaticTreeCreation=decoder.decodeBool(forKey:"automaticTreeCreation") 
        }
    }

    override open func encode(with coder: NSCoder) {super.encode(with:coder)
		if let sourceURL = self.sourceURL {
			coder.encode(sourceURL,forKey:"sourceURL")
		}
		if let destinationURL = self.destinationURL {
			coder.encode(destinationURL,forKey:"destinationURL")
		}
		if let hashMapViewName = self.hashMapViewName {
			coder.encode(hashMapViewName,forKey:"hashMapViewName")
		}
		coder.encode(self.computeTheHashMap,forKey:"computeTheHashMap")
		coder.encode(self.automaticTreeCreation,forKey:"automaticTreeCreation")
    }

    override open class var supportsSecureCoding:Bool{
        return true
    }

     required public init() {
        super.init()
    }

    // MARK: Identifiable

    override open class var collectionName:String{
        return "bsyncDirectives"
    }

    override open var d_collectionName:String{
        return BsyncDirectives.collectionName
    }
}